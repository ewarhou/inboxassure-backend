# InboxAssure Backend API Documentation

## Spamcheck Queueing System

The InboxAssure backend implements a queueing system for spamchecks to ensure fair resource allocation and prevent any single user from monopolizing the system.

### Spamcheck Status Flow

Spamchecks now follow this status flow:
1. **queued**: Initial status when a spamcheck is created or scheduled
2. **pending**: Ready to be processed by the launcher
3. **in_progress**: Currently being processed
4. **waiting_for_reports**: Emails have been sent, waiting for the specified time before generating reports
5. **generating_reports**: Reports are being generated
6. **completed**: Spamcheck is complete
7. **failed**: Spamcheck failed
8. **paused**: Spamcheck is paused

### Create Spamcheck Bison

**Endpoint:** `POST /api/spamcheck/create-spamcheck-bison`

**Authentication:** Bearer Token

**Description:** Create aa new spamcheck with accounts for Bison. The spamcheck will be created with 'queued' status and will be processed according to the queueing system.

**Request Body:** JSON object with the following fields:
- `name`: Name of the spamcheck
- `user_organization_id`: ID of the Bison organization to use
- `accounts`: List of email accounts to check (e.g. ["test1@example.com", "test2@example.com"])
- `text_only`: Whether to send text-only emails
- `subject`: Email subject template
- `body`: Email body template
- `scheduled_at`: When to run the spamcheck
- `recurring_days`: Optional, number of days for recurring checks
- `weekdays`: Optional, list of weekdays (0=Monday, 6=Sunday) when this spamcheck should run
- `is_domain_based`: Whether to filter accounts by domain
- `conditions`: Optional, conditions for sending
- `reports_waiting_time`: Optional, reports waiting time
- `update_sending_limit`: Optional, whether to update sending limits in Bison API based on scores

**Response:** Creation result with the following fields:
- `success`: Boolean indicating if the creation was successful
- `message`: Status message
- `data`: Created spamcheck details with:
  - `id`: Spamcheck ID
  - `name`: Spamcheck name
  - `status`: Status (always 'queued' for new spamchecks)
  - `accounts_count`: Number of accounts added to the spamcheck
  - `weekdays`: List of weekdays when the spamcheck should run
  - `update_sending_limit`: Whether to update sending limits in Bison API based on scores

**Example Response:**
```json
{
  "success": true,
  "message": "Spamcheck created successfully",
  "data": {
    "id": 123,
    "name": "Weekly Deliverability Test",
    "status": "queued",
    "accounts_count": 50,
    "weekdays": [0, 3],
    "update_sending_limit": true
  }
}
```

### List Spamchecks

**Endpoint:** `GET /api/spamcheck/list-spamchecks`

**Authentication:** Bearer Token

**Description:** Get a paginated list of all spamchecks (both Instantly and Bison) with their details.

**Parameters:**
- `search` (optional): Search term to filter spamchecks by name
- `status` (optional): Status filter (queued, pending, in_progress, waiting_for_reports, generating_reports, completed, failed, paused)
- `platform` (optional): Platform filter (instantly, bison)
- `page` (optional): Page number (default: 1)
- `per_page` (optional): Items per page (default: 10)

**Response:** List of spamchecks with the following fields:
- `success`: Boolean indicating if the request was successful
- `message`: Status message
- `data`: Array of spamcheck objects with:
  - `id`: Spamcheck ID
  - `name`: Spamcheck name
  - `status`: Current status
  - `scheduled_at`: Scheduled date and time
  - `recurring_days`: Number of days for recurring checks
  - `weekdays`: List of weekdays when the spamcheck should run
  - `is_domain_based`: Whether the spamcheck is domain-based
  - `conditions`: Conditions for sending
  - `reports_waiting_time`: Time to wait before generating reports
  - `update_sending_limit`: Whether to update sending limits in Bison API based on scores
  - `created_at`: Creation date and time
  - `updated_at`: Last update date and time
  - `user_organization_id`: Organization ID
  - `organization_name`: Organization name
  - `accounts_count`: Number of accounts in the spamcheck
  - `campaigns_count`: Number of campaigns (for Instantly only)
  - `options`: Email options with:
    - `open_tracking`: Whether open tracking is enabled (Instantly only)
    - `link_tracking`: Whether link tracking is enabled (Instantly only)
    - `text_only`: Whether text-only emails are used
    - `subject`: Email subject template
    - `body`: Email body template
  - `platform`: Platform (instantly or bison)
- `meta`: Pagination metadata with:
  - `total`: Total number of spamchecks
  - `page`: Current page number
  - `per_page`: Items per page
  - `total_pages`: Total number of pages

**Example Response:**
```json
{
  "success": true,
  "message": "Successfully retrieved 45 spamchecks",
  "data": [
    {
      "id": 123,
      "name": "Weekly Deliverability Test",
      "status": "queued",
      "scheduled_at": "2024-07-15T14:30:00Z",
      "recurring_days": 7,
      "weekdays": [0, 3],
      "is_domain_based": true,
      "conditions": "google>=0.5andoutlook>=0.5sending=25/3",
      "reports_waiting_time": 1.0,
      "update_sending_limit": true,
      "created_at": "2024-07-10T09:15:30Z",
      "updated_at": "2024-07-10T09:15:30Z",
      "user_organization_id": 42,
      "organization_name": "Marketing Team",
      "accounts_count": 50,
      "campaigns_count": 0,
      "options": {
        "open_tracking": null,
        "link_tracking": null,
        "text_only": true,
        "subject": "Test Email Subject",
        "body": "This is a test email body content."
      },
      "platform": "bison"
    }
  ],
  "meta": {
    "total": 45,
    "page": 1,
    "per_page": 10,
    "total_pages": 5
  }
}
```

### Update Bison Spamcheck

**Endpoint:** `PUT /api/spamcheck/update-spamcheck-bison/{spamcheck_id}`

**Authentication:** Bearer Token

**Description:** Update an existing Bison spamcheck's details, including name, email content, and configuration settings. Only works if the current status is queued, pending, failed, completed, paused, or waiting_for_reports.

**Parameters:**
- `spamcheck_id`: ID of the spamcheck to update

**Request Body:** JSON object with the following optional fields:
- `name`: New name for the spamcheck
- `accounts`: New list of email accounts to check
- `text_only`: Whether to send text-only emails
- `subject`: New email subject template
- `body`: New email body template
- `scheduled_at`: New scheduled time (ISO format)
- `recurring_days`: New recurring days setting
- `weekdays`: List of weekdays (0=Monday, 6=Sunday) when this spamcheck should run
- `is_domain_based`: Whether to filter accounts by domain
- `conditions`: Conditions for sending (e.g., 'google>=0.5andoutlook>=0.5')
- `reports_waiting_time`: Time in hours to wait before generating reports
- `update_sending_limit`: Whether to update sending limits in Bison API based on scores

**Response:** Update result with the following fields:
- `success`: Boolean indicating if the update was successful
- `message`: Status message
- `data`: Updated spamcheck details with:
  - `id`: Spamcheck ID
  - `name`: Updated spamcheck name
  - `scheduled_at`: Updated scheduled time
  - `recurring_days`: Updated recurring days setting
  - `status`: Current status
  - `accounts_updated`: Boolean indicating if accounts were updated

### Toggle Pause Bison Spamcheck

**Endpoint:** `POST /api/spamcheck/toggle-pause-bison/{spamcheck_id}`

**Authentication:** Bearer Token

**Description:** Toggle a Bison spamcheck between paused and queued status. This endpoint allows you to pause a running spamcheck or resume a paused one. Only works if the current status is paused, queued, pending, or completed.

**Parameters:**
- `spamcheck_id`: ID of the Bison spamcheck to toggle

**Response:** Toggle result with the following fields:
- `success`: Boolean indicating if the toggle was successful
- `message`: Status message
- `data`: Updated spamcheck details with:
  - `id`: Spamcheck ID
  - `name`: Spamcheck name
  - `status`: New status (paused or queued)

**Example Response:**
```json
{
  "success": true,
  "message": "Spamcheck 'Weekly Deliverability Test' is now paused",
  "data": {
    "id": 123,
    "name": "Weekly Deliverability Test",
    "status": "paused"
  }
}
```

### Get Spamcheck Details

**Endpoint:** `GET /api/spamcheck/get-spamcheck/{spamcheck_id}`

**Authentication:** Bearer Token

**Description:** Get detailed information about a specific Bison spamcheck by its ID.

**Parameters:**
- `spamcheck_id`: ID of the Bison spamcheck to retrieve

**Response:** Spamcheck details with the following fields:
- `success`: Boolean indicating if the request was successful
- `message`: Status message
- `data`: Spamcheck details with:
  - `id`: Spamcheck ID
  - `name`: Spamcheck name
  - `createdAt`: Creation date and time
  - `lastRunDate`: Last run date and time
  - `status`: Current status
  - `configuration`: Configuration details with:
    - `domainBased`: Whether the spamcheck is domain-based
    - `trackOpens`: Whether open tracking is enabled
    - `trackClicks`: Whether link tracking is enabled
    - `waitingTime`: Time to wait before generating reports
    - `googleInboxCriteria`: Google inbox criteria
    - `outlookInboxCriteria`: Outlook inbox criteria
    - `updateSendingLimit`: Whether to update sending limits in Bison API based on scores
    - `weekdays`: List of weekdays when the spamcheck should run
  - `emailContent`: Email content with:
    - `subject`: Email subject template
    - `body`: Email body template
  - `results`: Results summary with:
    - `googleScore`: Average Google score
    - `outlookScore`: Average Outlook score
    - `totalAccounts`: Total number of accounts
    - `inboxedAccounts`: Number of accounts in inbox
    - `spamAccounts`: Number of accounts in spam

**Example Response:**
```json
{
  "success": true,
  "message": "Successfully retrieved spamcheck details",
  "data": {
    "id": "123",
    "name": "Weekly Deliverability Test",
    "createdAt": "2024-07-10T09:15:30Z",
    "lastRunDate": "2024-07-15T14:30:00Z",
    "status": "waiting_for_reports",
    "configuration": {
      "domainBased": true,
      "trackOpens": false,
      "trackClicks": false,
      "waitingTime": "1.0",
      "googleInboxCriteria": "0.5",
      "outlookInboxCriteria": "0.5",
      "updateSendingLimit": true,
      "weekdays": ["0", "3"]
    },
    "emailContent": {
      "subject": "Test Email Subject",
      "body": "This is a test email body content."
    },
    "results": {
      "googleScore": 0.85,
      "outlookScore": 0.78,
      "totalAccounts": 50,
      "inboxedAccounts": 42,
      "spamAccounts": 8
    }
  }
}
```

### Queue Processing

The system processes spamchecks in the queue as follows:
1. For each user, only one spamcheck is processed at a time
2. Only spamchecks scheduled for now or in the past are processed (schedule-aware)
3. Only spamchecks scheduled for the current weekday are processed (if weekdays are specified)
4. The oldest eligible queued spamcheck for each user is selected first
5. When a spamcheck is completed, the next queued spamcheck for that user is processed
6. Spamchecks in 'waiting_for_reports' status don't block other spamchecks from being processed
7. Recurring spamchecks are automatically added back to the queue with 'queued' status

This ensures fair resource allocation and prevents any single user from monopolizing the system while respecting scheduled dates and weekday preferences.

### Weekday Scheduling

The system supports scheduling spamchecks to run only on specific days of the week:

- Weekdays are represented as integers from 0 to 6 (0=Monday, 6=Sunday)
- You can specify any combination of weekdays (e.g., [0, 3] for Monday and Thursday)
- Weekday scheduling works alongside the existing scheduling options:
  * `scheduled_at`: When the spamcheck should first run
  * `recurring_days`: How often to repeat the spamcheck
  * `weekdays`: Which days of the week the spamcheck is allowed to run

For example:
- If you set `scheduled_at=2023-05-01` (a Monday), `recurring_days=7`, and `weekdays=[0]` (Monday only), the spamcheck would run every Monday.
- If you set `scheduled_at=2023-05-01`, `recurring_days=3`, and `weekdays=[0,3]` (Monday and Thursday), the spamcheck would run every 3 days, but only if that day is a Monday or Thursday.

### Reports Waiting Time

The system supports configurable waiting times before generating reports after emails are sent:

- When emails are sent, the spamcheck enters the 'waiting_for_reports' status
- The `reports_waiting_time` field determines how long to wait before generating reports
- Available options:
  * `0`: Immediate report generation (no waiting)
  * `0.5`: 30 minutes waiting time
  * `1.0`: 1 hour waiting time (default)
  * `2.0` to `12.0`: 2 to 12 hours waiting time in 1-hour increments

This waiting period allows time for emails to be delivered and processed by email providers before checking their placement, resulting in more accurate deliverability reports.

During this waiting period, users can continue to queue and process other spamchecks, as the 'waiting_for_reports' status doesn't block the queue processing system.

### Get Bison Account Details

**Endpoint:** `GET /api/spamcheck/account-bison-details`

**Authentication:** Bearer Token

**Description:** Get detailed information for a specific Bison email account, including performance metrics, score history, and domain statistics.

**Parameters:**
- `email`: The email address to get details for

**Response:** Account details with the following fields:
- `success`: Boolean indicating if the request was successful
- `message`: Status message
- `data`: Account details with:
  - `email`: Email address
  - `domain`: Domain part of the email (e.g., gmail.com)
  - `sends_per_day`: Current sending limit per day
  - `google_score`: Latest Google inbox placement score (0-1)
  - `outlook_score`: Latest Outlook inbox placement score (0-1)
  - `status`: Current status ("Inboxing" or "Resting")
  - `workspace`: Bison workspace name
  - `last_check`: Information about the last check with:
    - `id`: Check ID
    - `date`: Date of the last check
  - `reports_link`: Link to detailed reports
  - `history`: Historical performance with:
    - `total_checks`: Total number of checks performed
    - `good_checks`: Number of checks with good results
    - `bad_checks`: Number of checks with bad results
  - `bounce_count`: Number of bounced emails
  - `reply_count`: Number of replies received
  - `emails_sent`: Total number of emails sent
  - `tags_list`: Array of tags associated with the account
  - `score_history`: Array of historical score data with:
    - `date`: Date of the check
    - `google_score`: Google score at that time
    - `outlook_score`: Outlook score at that time
    - `status`: Status at that time
    - `report_link`: Link to the report
  - `domain_accounts`: Array of other accounts with the same domain
  - `domain_summary`: Domain-level statistics with:
    - `total_accounts`: Total number of accounts with this domain
    - `avg_google_score`: Average Google score across all accounts
    - `avg_outlook_score`: Average Outlook score across all accounts
    - `inboxing_accounts`: Number of accounts currently inboxing
    - `resting_accounts`: Number of accounts currently resting
    - `total_checks`: Total number of checks for this domain
    - `good_checks`: Number of good checks for this domain
    - `bad_checks`: Number of bad checks for this domain

**Example Response:**
```json
{
  "success": true,
  "message": "Account details retrieved successfully",
  "data": {
    "email": "test@gmail.com",
    "domain": "gmail.com",
    "sends_per_day": 25,
    "google_score": 0.75,
    "outlook_score": 0.8,
    "status": "Inboxing",
    "workspace": "Marketing Team",
    "last_check": {
      "id": "123",
      "date": "2024-07-15T14:30:00Z"
    },
    "reports_link": "https://app.emailguard.io/reports/abc123",
    "history": {
      "total_checks": 10,
      "good_checks": 8,
      "bad_checks": 2
    },
    "bounce_count": 0,
    "reply_count": 3,
    "emails_sent": 25,
    "tags_list": ["marketing", "newsletter", "important"],
    "score_history": [
      {
        "date": "2024-07-15T14:30:00Z",
        "google_score": 0.75,
        "outlook_score": 0.8,
        "status": "Inboxing",
        "report_link": "https://app.emailguard.io/reports/abc123"
      },
      {
        "date": "2024-07-08T14:30:00Z",
        "google_score": 0.7,
        "outlook_score": 0.75,
        "status": "Inboxing",
        "report_link": "https://app.emailguard.io/reports/def456"
      }
    ],
    "domain_accounts": [
      {
        "email": "other@gmail.com",
        "google_score": 0.65,
        "outlook_score": 0.7,
        "status": "Inboxing",
        "workspace": "Marketing Team",
        "last_check_date": "2024-07-14T10:15:00Z",
        "bounce_count": 1,
        "reply_count": 2,
        "emails_sent": 20,
        "history": {
          "total_checks": 8,
          "good_checks": 6,
          "bad_checks": 2
        }
      }
    ],
    "domain_summary": {
      "total_accounts": 2,
      "avg_google_score": 0.7,
      "avg_outlook_score": 0.75,
      "inboxing_accounts": 2,
      "resting_accounts": 0,
      "total_checks": 18,
      "good_checks": 14,
      "bad_checks": 4
    }
  }
}
```
