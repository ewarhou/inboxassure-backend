# InboxAssure Backend API Documentation

Base URL: `http://inboxassure-backend.imnodev.com/api`

## Spamcheck Bison Endpoints

### Create Spamcheck Bison
`POST /spamcheck/create-spamcheck-bison`

Creates a new spamcheck with accounts for Bison.

**Request Body:**
```json
{
  "name": "Test Spamcheck",
  "user_organization_id": 1,
  "accounts": ["test@example.com"],
  "text_only": true,
  "subject": "Test Subject",
  "body": "Test Body",
  "scheduled_at": "2025-02-23T00:17:51.315Z",
  "recurring_days": 0,
  "is_domain_based": false,
  "conditions": "google>=0.5andoutlook>=0.5",
  "reports_waiting_time": 1.0
}
```

**Response:**
```json
{
  "success": true,
  "message": "Spamcheck created successfully",
  "data": {
    "id": 1,
    "name": "Test Spamcheck",
    "status": "pending",
    "accounts_count": 1
  }
}
```

### Update Spamcheck Bison
`PUT /spamcheck/update-spamcheck-bison/{spamcheck_id}`

Updates an existing Bison spamcheck. All fields are optional.

**Request Body:**
```json
{
  "name": "Updated Test Spamcheck",
  "accounts": ["test@example.com"],
  "text_only": true,
  "subject": "Updated Subject",
  "body": "Updated Body",
  "scheduled_at": "2025-02-23T00:17:51.315Z",
  "recurring_days": 7,
  "is_domain_based": false,
  "conditions": "google>=0.5andoutlook>=0.5",
  "reports_waiting_time": 1.0
}
```

**Response:**
```json
{
  "success": true,
  "message": "Spamcheck updated successfully",
  "data": {
    "id": 1,
    "name": "Updated Test Spamcheck",
    "scheduled_at": "2025-02-23T00:17:51.315Z",
    "recurring_days": 7,
    "status": "pending",
    "accounts_updated": true
  }
}
```

### Delete Spamcheck Bison
`DELETE /spamcheck/delete-spamcheck-bison/{spamcheck_id}`

Deletes a Bison spamcheck and all its related data.

**Response:**
```json
{
  "success": true,
  "message": "Spamcheck 'Test Spamcheck' and all related data deleted successfully"
}
```

### List Spamchecks
`GET /spamcheck/list-spamchecks`

Retrieves all spamchecks (both Instantly and Bison) for the authenticated user, sorted by creation date (newest first).

You can identify the platform of each spamcheck by:
1. The `platform` field which will be either "instantly" or "bison"
2. The options structure:
   - Bison spamchecks will have `open_tracking` and `link_tracking` as `null`
   - Instantly spamchecks will have actual boolean values for these fields
3. The campaigns_count:
   - Bison spamchecks will always have `campaigns_count: 0`
   - Instantly spamchecks can have any number of campaigns

**Response:**
```json
{
  "success": true,
  "message": "Successfully retrieved 2 spamchecks",
  "data": [
    {
      "id": 1,
      "name": "Test Instantly Spamcheck",
      "status": "pending",
      "scheduled_at": "2025-02-23T00:17:51.315Z",
      "recurring_days": 7,
      "is_domain_based": false,
      "conditions": "google>=0.5andoutlook>=0.5",
      "reports_waiting_time": 1.0,
      "created_at": "2024-03-20T09:00:00Z",
      "updated_at": "2024-03-20T09:00:00Z",
      "user_organization_id": 1,
      "organization_name": "Test Organization",
      "accounts_count": 3,
      "campaigns_count": 2,
      "options": {
        "open_tracking": true,
        "link_tracking": true,
        "text_only": false,
        "subject": "Test Subject",
        "body": "Test Body"
      },
      "platform": "instantly"
    },
    {
      "id": 2,
      "name": "Test Bison Spamcheck",
      "status": "pending",
      "scheduled_at": "2025-02-24T00:17:51.315Z",
      "recurring_days": 0,
      "is_domain_based": true,
      "conditions": "google>=0.7",
      "reports_waiting_time": 2.0,
      "created_at": "2024-03-19T09:00:00Z",
      "updated_at": "2024-03-19T09:00:00Z",
      "user_organization_id": 1,
      "organization_name": "Test Organization",
      "accounts_count": 5,
      "campaigns_count": 0,
      "options": {
        "open_tracking": null,
        "link_tracking": null,
        "text_only": true,
        "subject": "Another Subject",
        "body": "Another Body"
      },
      "platform": "bison"
    }
  ]
}
```

**Error Response:**
```json
{
  "success": false,
  "message": "Error retrieving spamchecks: <error_message>",
  "data": []
}
```

**Notes:**
- All endpoints require authentication (Bearer token)
- `spamcheck_id` in URLs is an integer
- Status can be: pending, in_progress, generating_reports, completed, failed, paused
- Updates and deletions are only allowed for spamchecks in certain statuses
- Spamcheck names must be unique within a user's organization
- Email accounts are validated before saving
- All operations use database transactions for data consistency

**Platform Identification:**
1. Primary Method: Check the `platform` field
   - "instantly" = Instantly spamcheck
   - "bison" = Bison spamcheck

2. Secondary Method: Check the options structure
   - If `open_tracking` and `link_tracking` are `null` = Bison spamcheck
   - If `open_tracking` and `link_tracking` have boolean values = Instantly spamcheck

3. Additional Indicator: Check campaigns_count
   - If `campaigns_count` is always 0 = Bison spamcheck
   - If `campaigns_count` can be > 0 = Instantly spamcheck

