# InboxAssure Backend API Documentation

## Spamcheck Queueing System

The InboxAssure backend implements a queueing system for spamchecks to ensure fair resource allocation and prevent any single user from monopolizing the system.

### Spamcheck Status Flow

Spamchecks now follow this status flow:
1. **queued**: Initial status when a spamcheck is created or scheduled
2. **pending**: Ready to be processed by the launcher
3. **in_progress**: Currently being processed
4. **generating_reports**: Reports are being generated
5. **completed**: Spamcheck is complete
6. **failed**: Spamcheck failed
7. **paused**: Spamcheck is paused

### Create Spamcheck Bison

**Endpoint:** `POST /api/spamcheck/create-spamcheck-bison`

**Authentication:** Bearer Token

**Description:** Create a new spamcheck with accounts for Bison. The spamcheck will be created with 'queued' status and will be processed according to the queueing system.

**Request Body:** JSON object with the following fields:
- `name`: Name of the spamcheck
- `user_organization_id`: ID of the Bison organization to use
- `accounts`: List of email accounts to check (e.g. ["test1@example.com", "test2@example.com"])
- `text_only`: Whether to send text-only emails
- `subject`: Email subject template
- `body`: Email body template
- `scheduled_at`: When to run the spamcheck
- `recurring_days`: Optional, number of days for recurring checks
- `is_domain_based`: Whether to filter accounts by domain
- `conditions`: Optional, conditions for sending
- `reports_waiting_time`: Optional, reports waiting time

**Response:** Creation result with the following fields:
- `success`: Boolean indicating if the creation was successful
- `message`: Status message
- `data`: Created spamcheck details with:
  - `id`: Spamcheck ID
  - `name`: Spamcheck name
  - `status`: Status (always 'queued' for new spamchecks)
  - `accounts_count`: Number of accounts added to the spamcheck

**Example Response:**
```json
{
  "success": true,
  "message": "Spamcheck created successfully",
  "data": {
    "id": 123,
    "name": "Weekly Deliverability Test",
    "status": "queued",
    "accounts_count": 50
  }
}
```

### List Spamchecks

**Endpoint:** `GET /api/spamcheck/list-spamchecks`

**Authentication:** Bearer Token

**Description:** Get a paginated list of all spamchecks (both Instantly and Bison) with their details.

**Parameters:**
- `search` (optional): Search term to filter spamchecks by name
- `status` (optional): Status filter (queued, pending, in_progress, generating_reports, completed, failed, paused)
- `platform` (optional): Platform filter (instantly, bison)
- `page` (optional): Page number (default: 1)
- `per_page` (optional): Items per page (default: 10)

**Response:** List of spamchecks with the following fields:
- `success`: Boolean indicating if the request was successful
- `message`: Status message
- `data`: Array of spamcheck objects with:
  - `id`: Spamcheck ID
  - `name`: Spamcheck name
  - `status`: Current status
  - `scheduled_at`: Scheduled date and time
  - `recurring_days`: Number of days for recurring checks
  - `is_domain_based`: Whether the spamcheck is domain-based
  - `conditions`: Conditions for sending
  - `reports_waiting_time`: Time to wait before generating reports
  - `created_at`: Creation date and time
  - `updated_at`: Last update date and time
  - `user_organization_id`: Organization ID
  - `organization_name`: Organization name
  - `accounts_count`: Number of accounts in the spamcheck
  - `campaigns_count`: Number of campaigns (for Instantly only)
  - `options`: Email options with:
    - `open_tracking`: Whether open tracking is enabled (Instantly only)
    - `link_tracking`: Whether link tracking is enabled (Instantly only)
    - `text_only`: Whether text-only emails are used
    - `subject`: Email subject template
    - `body`: Email body template
  - `platform`: Platform (instantly or bison)
- `meta`: Pagination metadata with:
  - `total`: Total number of spamchecks
  - `page`: Current page number
  - `per_page`: Items per page
  - `total_pages`: Total number of pages

**Example Response:**
```json
{
  "success": true,
  "message": "Successfully retrieved 45 spamchecks",
  "data": [
    {
      "id": 123,
      "name": "Weekly Deliverability Test",
      "status": "queued",
      "scheduled_at": "2024-07-15T14:30:00Z",
      "recurring_days": 7,
      "is_domain_based": true,
      "conditions": "google>=0.5andoutlook>=0.5sending=25/3",
      "reports_waiting_time": 1.0,
      "created_at": "2024-07-10T09:15:30Z",
      "updated_at": "2024-07-10T09:15:30Z",
      "user_organization_id": 42,
      "organization_name": "Marketing Team",
      "accounts_count": 50,
      "campaigns_count": 0,
      "options": {
        "open_tracking": null,
        "link_tracking": null,
        "text_only": true,
        "subject": "Test Email Subject",
        "body": "This is a test email body content."
      },
      "platform": "bison"
    }
  ],
  "meta": {
    "total": 45,
    "page": 1,
    "per_page": 10,
    "total_pages": 5
  }
}
```

### Update Bison Spamcheck

**Endpoint:** `PUT /api/spamcheck/update-spamcheck-bison/{spamcheck_id}`

**Authentication:** Bearer Token

**Description:** Update an existing Bison spamcheck's details, including name, email content, and configuration settings. Only works if the current status is queued, pending, failed, completed, or paused.

**Parameters:**
- `spamcheck_id`: ID of the spamcheck to update

**Request Body:** JSON object with the following optional fields:
- `name`: New name for the spamcheck
- `accounts`: New list of email accounts to check
- `text_only`: Whether to send text-only emails
- `subject`: New email subject template
- `body`: New email body template
- `scheduled_at`: New scheduled time (ISO format)
- `recurring_days`: New recurring days setting
- `is_domain_based`: Whether to filter accounts by domain
- `conditions`: Conditions for sending (e.g., 'google>=0.5andoutlook>=0.5')
- `reports_waiting_time`: Time in hours to wait before generating reports

**Response:** Update result with the following fields:
- `success`: Boolean indicating if the update was successful
- `message`: Status message
- `data`: Updated spamcheck details with:
  - `id`: Spamcheck ID
  - `name`: Updated spamcheck name
  - `scheduled_at`: Updated scheduled time
  - `recurring_days`: Updated recurring days setting
  - `status`: Current status
  - `accounts_updated`: Boolean indicating if accounts were updated

### Toggle Pause Bison Spamcheck

**Endpoint:** `POST /api/spamcheck/toggle-pause-bison/{spamcheck_id}`

**Authentication:** Bearer Token

**Description:** Toggle a Bison spamcheck between paused and queued status. This endpoint allows you to pause a running spamcheck or resume a paused one. Only works if the current status is paused, queued, pending, or completed.

**Parameters:**
- `spamcheck_id`: ID of the Bison spamcheck to toggle

**Response:** Toggle result with the following fields:
- `success`: Boolean indicating if the toggle was successful
- `message`: Status message
- `data`: Updated spamcheck details with:
  - `id`: Spamcheck ID
  - `name`: Spamcheck name
  - `status`: New status (paused or queued)

**Example Response:**
```json
{
  "success": true,
  "message": "Spamcheck 'Weekly Deliverability Test' is now paused",
  "data": {
    "id": 123,
    "name": "Weekly Deliverability Test",
    "status": "paused"
  }
}
```

### Queue Processing

The system processes spamchecks in the queue as follows:
1. For each user, only one spamcheck is processed at a time
2. Only spamchecks scheduled for now or in the past are processed (schedule-aware)
3. The oldest eligible queued spamcheck for each user is selected first
4. When a spamcheck is completed, the next queued spamcheck for that user is processed
5. Recurring spamchecks are automatically added back to the queue with 'queued' status

This ensures fair resource allocation and prevents any single user from monopolizing the system while respecting scheduled dates.
