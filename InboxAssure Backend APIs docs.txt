# InboxAssure Backend API Documentation

Base URL: `http://inboxassure-backend.imnodev.com/api`

## Spamcheck Bison Endpoints

### Create Spamcheck Bison
`POST /spamcheck/create-spamcheck-bison`

Creates a new spamcheck with accounts for Bison.

**Request Body:**
```json
{
  "name": "Test Spamcheck",
  "user_organization_id": 1,
  "accounts": ["test@example.com"],
  "text_only": true,
  "subject": "Test Subject",
  "body": "Test Body",
  "scheduled_at": "2025-02-23T00:17:51.315Z",
  "recurring_days": 0,
  "is_domain_based": false,
  "conditions": "google>=0.5andoutlook>=0.5",
  "reports_waiting_time": 1.0
}
```

**Response:**
```json
{
  "success": true,
  "message": "Spamcheck created successfully",
  "data": {
    "id": 1,
    "name": "Test Spamcheck",
    "status": "pending",
    "accounts_count": 1
  }
}
```

### Update Spamcheck Bison
`PUT /spamcheck/update-spamcheck-bison/{spamcheck_id}`

Updates an existing Bison spamcheck. All fields are optional.

**Request Body:**
```json
{
  "name": "Updated Test Spamcheck",
  "accounts": ["test@example.com"],
  "text_only": true,
  "subject": "Updated Subject",
  "body": "Updated Body",
  "scheduled_at": "2025-02-23T00:17:51.315Z",
  "recurring_days": 7,
  "is_domain_based": false,
  "conditions": "google>=0.5andoutlook>=0.5",
  "reports_waiting_time": 1.0
}
```

**Response:**
```json
{
  "success": true,
  "message": "Spamcheck updated successfully",
  "data": {
    "id": 1,
    "name": "Updated Test Spamcheck",
    "scheduled_at": "2025-02-23T00:17:51.315Z",
    "recurring_days": 7,
    "status": "pending",
    "accounts_updated": true
  }
}
```

### Delete Spamcheck Bison
`DELETE /spamcheck/delete-spamcheck-bison/{spamcheck_id}`

Deletes a Bison spamcheck and all its related data.

**Response:**
```json
{
  "success": true,
  "message": "Spamcheck 'Test Spamcheck' and all related data deleted successfully"
}
```

### List Spamchecks Bison
`GET /spamcheck/list-spamchecks-bison`

Retrieves all Bison spamchecks for the authenticated user.

**Response:**
```json
{
  "success": true,
  "message": "Successfully retrieved 2 spamchecks",
  "data": [
    {
      "id": 1,
      "name": "Test Spamcheck 1",
      "status": "pending",
      "scheduled_at": "2025-02-23T00:17:51.315Z",
      "recurring_days": 7,
      "is_domain_based": false,
      "conditions": "google>=0.5andoutlook>=0.5",
      "reports_waiting_time": 1.0,
      "text_only": true,
      "subject": "Test Subject",
      "body": "Test Body",
      "created_at": "2024-03-20T09:00:00Z",
      "updated_at": "2024-03-20T09:00:00Z",
      "user_organization_id": 1,
      "organization_name": "Test Bison Organization",
      "accounts_count": 3
    },
    {
      "id": 2,
      "name": "Test Spamcheck 2",
      "status": "completed",
      "scheduled_at": "2025-02-24T00:17:51.315Z",
      "recurring_days": 0,
      "is_domain_based": true,
      "conditions": "google>=0.7",
      "reports_waiting_time": 2.0,
      "text_only": false,
      "subject": "Another Subject",
      "body": "Another Body",
      "created_at": "2024-03-19T09:00:00Z",
      "updated_at": "2024-03-19T09:00:00Z",
      "user_organization_id": 1,
      "organization_name": "Test Bison Organization",
      "accounts_count": 5
    }
  ]
}
```

**Error Response:**
```json
{
  "success": false,
  "message": "Error retrieving spamchecks: <error_message>",
  "data": []
}
```

**Notes:**
- All endpoints require authentication (Bearer token)
- `spamcheck_id` in URLs is an integer
- Status can be: pending, in_progress, generating_reports, completed, failed, paused
- Updates and deletions are only allowed for spamchecks in certain statuses
- Spamcheck names must be unique within a user's organization
- Email accounts are validated before saving
- All operations use database transactions for data consistency

