# InboxAssure Backend APIs Documentation

## Profile Endpoints (Authentication Required)

These endpoints manage user profile information, often used for navigation bars and settings pages.

### Get User Profile

*   **Method:** `GET`
*   **URL:** `/api/profile/`
*   **Authentication:** Required (Bearer Token)
*   **Description:** Retrieves the profile information (name, email, picture URL, timezone) for the authenticated user.
*   **Success Response:**
    *   **Code:** 200 OK
    *   **Content:** `ProfileResponseSchema`
        ```json
        {
          "first_name": "John",
          "last_name": "Doe",
          "email": "john.doe@example.com",
          "profile_picture": "https://inboxassure-backend.imnodev.com/media/profile_pictures/1/some-uuid.jpg", // Or null
          "timezone": "America/New_York" // Or null
        }
        ```
*   **Error Response:**
    *   **Code:** 401 Unauthorized
    *   **Code:** 400 Bad Request (If profile cannot be retrieved)

---

### Update User Profile

*   **Method:** `PUT`
*   **URL:** `/api/profile/`
*   **Authentication:** Required (Bearer Token)
*   **Description:** Updates the authenticated user's first name, last name, and/or timezone.
*   **Request Body:**
    *   **Content-Type:** `application/json`
    *   **Schema:** `UpdateProfileSchema`
        ```json
        {
          "first_name": "Jonathan", // Optional
          "last_name": "Doer",    // Optional
          "timezone": "Europe/London" // Optional, must be valid pytz timezone
        }
        ```
*   **Success Response:**
    *   **Code:** 200 OK
    *   **Content:** `ProfileResponseSchema` (Updated profile)
*   **Error Response:**
    *   **Code:** 401 Unauthorized
    *   **Code:** 400 Bad Request (e.g., invalid timezone)
    *   **Code:** 500 Internal Server Error

---

### Update Profile Picture

*   **Method:** `PUT`
*   **URL:** `/api/profile/picture`
*   **Authentication:** Required (Bearer Token)
*   **Description:** Uploads a new profile picture for the authenticated user. Replaces the existing one if present. Accepts JPG, JPEG, PNG, or GIF files up to 2.5MB.
*   **Request Body:**
    *   **Content-Type:** `multipart/form-data`
    *   **Form Field:** `file` (The image file to upload)
*   **Success Response:**
    *   **Code:** 200 OK
    *   **Content:** `ProfileResponseSchema` (Updated profile with new picture URL)
*   **Error Response:**
    *   **Code:** 401 Unauthorized
    *   **Code:** 400 Bad Request (e.g., no file, invalid file type/extension, file too large)
    *   **Code:** 500 Internal Server Error (e.g., error saving file)

---

## Webhook Endpoints

### Generate Webhook URL

*   **Method:** `POST`
*   **URL:** `/api/webhook/generate`
*   **Authentication:** Required (Bearer Token)
*   **Description:** Generates a new unique webhook URL for the authenticated user. If a webhook URL already exists for the user, it will be deleted and replaced with the new one. The generated URL points to the `/api/webhook/receive/{webhook_id}/` endpoint.
*   **Request Body:** None
*   **Success Response:**
    *   **Code:** 200 OK
    *   **Content:** `WebhookUrlSchema`
        ```json
        {
          "webhook_url": "https://inboxassure-backend.imnodev.com/api/webhook/receive/some-unique-uuid/"
        }
        ```
*   **Error Response:**
    *   **Code:** 401 Unauthorized (If token is missing or invalid)

---

### Get Webhook URL

*   **Method:** `GET`
*   **URL:** `/api/webhook/`
*   **Authentication:** Required (Bearer Token)
*   **Description:** Retrieves the currently active webhook URL for the authenticated user.
*   **Success Response:**
    *   **Code:** 200 OK
    *   **Content:** `WebhookUrlSchema`
        ```json
        {
          "webhook_url": "https://inboxassure-backend.imnodev.com/api/webhook/receive/some-unique-uuid/"
        }
        ```
*   **Error Response:**
    *   **Code:** 401 Unauthorized (If token is missing or invalid)
    *   **Code:** 404 Not Found (If no webhook URL exists for the user)

---

### Receive Webhook Data

*   **Method:** `POST`
*   **URL:** `/api/webhook/receive/{webhook_id}/`
*   **Authentication:** None (URL uses a unique, unguessable ID)
*   **Description:** This is the public endpoint where third-party services (like Bison) should send webhook POST requests. It receives the JSON payload, finds the associated user via the `webhook_id`, and stores the payload in the `BisonWebhookData` table. It also triggers the signal to process the data (e.g., create `BisonBounces` records).
*   **URL Parameters:**
    *   `webhook_id` (string, UUID format): The unique identifier for the webhook.
*   **Request Body:**
    *   **Content-Type:** `application/json`
    *   **Example:** (See payload example in `webhook/signals.py` or actual Bison webhook format)
*   **Success Response:**
    *   **Code:** 200 OK
    *   **Content:** Plain text `Webhook data received successfully.`
*   **Error Response:**
    *   **Code:** 404 Not Found (If the `webhook_id` does not exist)
    *   **Code:** 400 Bad Request (If the request body is not valid JSON)

---

### Get Bounce Records

*   **Method:** `GET`
*   **URL:** `/api/webhook/bounces/`
*   **Authentication:** Required (Bearer Token)
*   **Description:** Retrieves a list of bounce records logged from Bison webhooks for the authenticated user.
*   **Query Parameters (Optional):**
    *   `start_date` (string, `YYYY-MM-DD`): Filter bounces created on or after this date.
    *   `end_date` (string, `YYYY-MM-DD`): Filter bounces created on or before this date.
    *   `workspace_name` (string): Filter by workspace name (case-insensitive contains match).
    *   `sender_email` (string): Filter by sender email address (case-insensitive exact match).
    *   `tag` (string): Filter by a specific tag present in the bounce record's tags list.
    *   `bucket_name` (string): Filter by bounce bucket name (case-insensitive exact match). Valid values: `invalid_address`, `reputation_block`, `auth_failure`, `policy_reject`, `temp_deferral`, `infra_other`, `unknown`.
    *   `campaign_name` (string): Filter by campaign name (case-insensitive contains match).
    *   `domain` (string): Filter by sender domain (case-insensitive exact match).
*   **Success Response:**
    *   **Code:** 200 OK
    *   **Content:** `List[BisonBounceSchema]`
        ```json
        [
          {
            "id": 1,
            "workspace_bison_id": 3,
            "workspace_name": "Karpos",
            "email_subject": "2025 plan for Dazos",
            "email_body": "<p>Hi Cameron...</p>",
            "lead_email": "cameron@dazos.com",
            "campaign_bison_id": 94,
            "campaign_name": "2nd Jason Pulliam...",
            "sender_bison_id": 1889,
            "sender_email": "Pat@exitstrategyconsulting.info",
            "domain": "exitstrategyconsulting.info",
            "tags": ["Google Good", "Outlook Good"],
            "bounce_reply": "Delivery has failed...",
            "bounce_bucket": "reputation_block",
            "bounce_code": "550 5.1.1",
            "bounce_reply_url": "https://example.com/bounce_reply_url",
            "created_at": "2025-05-07T10:30:00Z"
          }
          // ... more bounce records
        ]
        ```
*   **Error Response:**
    *   **Code:** 401 Unauthorized (If token is missing or invalid)

---

## Spamcheck Endpoints

Endpoints related to managing and viewing spamcheck results.

### Get Bison Accounts List

*   **Method:** `GET`
*   **URL:** `/api/spamcheck/accounts-bison`
*   **Authentication:** Required (Bearer Token)
*   **Description:** Retrieves a paginated list of Bison email accounts associated with the user, showing details from their latest spam check report.
*   **Query Parameters (Optional):**
    *   `spamcheck_id` (integer): Filter by a specific Bison spam check run ID.
    *   `search` (string): Filter accounts by email address (partial match).
    *   `status` (string): Filter by the latest check status (`all`, `Inboxing`, `Resting`).
    *   `workspace` (string): Filter by the Bison organization name.
    *   `filter` (string): Special filters: `at-risk` (equivalent to status=Resting), `protected` (equivalent to status=Inboxing).
    *   `tag` (string): Filter accounts where the latest report includes this specific tag.
    *   `page` (integer, default: 1): Page number for pagination.
    *   `per_page` (integer, default: 25): Number of accounts per page.
*   **Success Response:**
    *   **Code:** 200 OK
    *   **Content:** `AccountsResponseSchema`
        ```json
        {
          "data": [
            {
              "email": "eric@procoachedge.com",
              "domain": "procoachedge.com",
              "sends_per_day": 25,
              "google_score": 1.0,
              "outlook_score": 1.0,
              "status": "Inboxing",
              "workspace": "CoachPro",
              "last_check": {
                "id": "10a565ec1a6d44f7ba9a71afb7112e5f",
                "date": "2025-05-05T09:48:21.211216Z"
              },
              "reports_link": "https://app.emailguard.io/inbox-placement-tests/9ed5ac2a-e3c0-44a9-8990-f68e8170e444",
              "history": {
                "total_checks": 70,
                "good_checks": 68,
                "bad_checks": 2
              },
              "bounce_count": 8,
              "reply_count": 2,
              "emails_sent": 681,
              "tags_list": ["p.Maildoso", "Google Good", "Outlook Good"] // Example, will be [] if no tags on latest report
            }
            // ... more account data objects
          ],
          "meta": {
            "total": 150,
            "page": 1,
            "per_page": 25,
            "total_pages": 6
          }
        }
        ```
*   **Error Response:**
    *   **Code:** 401 Unauthorized (If token is missing or invalid)

---
