# InboxAssure Backend API Documentation

Base URL: `http://inboxassure-backend.imnodev.com/api`

## Authentication Endpoints

### Register
- **URL**: `/auth/register`
- **Method**: `POST`
- **Description**: Register a new user account
- **Request Body**:
  ```json
  {
    "username": "string",
    "email": "string",
    "password": "string",
    "first_name": "string (optional)",
    "last_name": "string (optional)"
  }
  ```
- **Success Response**:
  - **Code**: 200
  - **Content**:
    ```json
    {
      "access_token": "string",
      "token_type": "bearer"
    }
    ```
- **Error Response**:
  - **Code**: 400
  - **Content**:
    ```json
    {
      "detail": "string"
    }
    ```

### Login
- **URL**: `/auth/login`
- **Method**: `POST`
- **Description**: Authenticate a user and receive a JWT token
- **Request Body**:
  ```json
  {
    "email": "string",
    "password": "string"
  }
  ```
- **Success Response**:
  - **Code**: 200
  - **Content**:
    ```json
    {
      "access_token": "string",
      "token_type": "bearer"
    }
    ```
- **Error Response**:
  - **Code**: 401
  - **Content**:
    ```json
    {
      "detail": "Invalid credentials"
    }
    ```

## Profile Endpoints

### Get Profile
- **URL**: `/profile`
- **Method**: `GET`
- **Description**: Get the current user's profile information
- **Headers**: 
  - `Authorization`: `Bearer <token>`
- **Success Response**:
  - **Code**: 200
  - **Content**:
    ```json
    {
      "first_name": "string",
      "last_name": "string",
      "email": "string",
      "profile_picture": "string (URL)",
      "timezone": "string"
    }
    ```
- **Error Response**:
  - **Code**: 400
  - **Content**:
    ```json
    {
      "message": "Failed to get profile information"
    }
    ```

### Update Profile
- **URL**: `/profile`
- **Method**: `PUT`
- **Description**: Update the current user's profile information
- **Headers**: 
  - `Authorization`: `Bearer <token>`
- **Request Body**:
  ```json
  {
    "first_name": "string (optional)",
    "last_name": "string (optional)",
    "timezone": "string (optional)"
  }
  ```
- **Success Response**:
  - **Code**: 200
  - **Content**:
    ```json
    {
      "first_name": "string",
      "last_name": "string",
      "email": "string",
      "profile_picture": "string (URL)",
      "timezone": "string"
    }
    ```
- **Error Response**:
  - **Code**: 400 or 500
  - **Content**:
    ```json
    {
      "message": "string"
    }
    ```

### Upload Profile Picture
- **URL**: `/profile/picture`
- **Method**: `PUT`
- **Description**: Upload or update profile picture
- **Headers**: 
  - `Authorization`: `Bearer <token>`
  - `Content-Type`: `multipart/form-data`
- **Request Body**:
  - `file`: Image file (JPG, JPEG, PNG, or GIF, max 2.5MB)
- **Success Response**:
  - **Code**: 200
  - **Content**:
    ```json
    {
      "first_name": "string",
      "last_name": "string",
      "email": "string",
      "profile_picture": "string (URL)",
      "timezone": "string"
    }
    ```
- **Error Response**:
  - **Code**: 400 or 500
  - **Content**:
    ```json
    {
      "message": "string"
    }
    ```

## Password Management

### Change Password
- **URL**: `/auth/change-password`
- **Method**: `POST`
- **Description**: Change the current user's password
- **Headers**: 
  - `Authorization`: `Bearer <token>`
- **Request Body**:
  ```json
  {
    "old_password": "string",
    "new_password": "string"
  }
  ```
- **Success Response**:
  - **Code**: 200
  - **Content**:
    ```json
    {
      "message": "Password changed successfully"
    }
    ```
- **Error Response**:
  - **Code**: 400
  - **Content**:
    ```json
    {
      "message": "Current password is incorrect"
    }
    ```

### Reset Password Request
- **URL**: `/auth/password-reset-request`
- **Method**: `POST`
- **Description**: Request a password reset link
- **Request Body**:
  ```json
  {
    "email": "string"
  }
  ```
- **Success Response**:
  - **Code**: 200
  - **Content**:
    ```json
    {
      "message": "Password reset email sent"
    }
    ```
- **Error Response**:
  - **Code**: 404
  - **Content**:
    ```json
    {
      "message": "User with this email does not exist"
    }
    ```

### Verify Reset Token
- **URL**: `/auth/password-reset-verify`
- **Method**: `POST`
- **Description**: Verify if a password reset token is valid
- **Request Body**:
  ```json
  {
    "token": "string"
  }
  ```
- **Success Response**:
  - **Code**: 200
  - **Content**:
    ```json
    {
      "valid": true
    }
    ```
  OR
    ```json
    {
      "valid": false,
      "message": "Token has expired or has been used"
    }
    ```
- **Error Response**:
  - **Code**: 404
  - **Content**:
    ```json
    {
      "message": "Invalid token"
    }
    ```

### Reset Password
- **URL**: `/auth/password-reset-confirm`
- **Method**: `POST`
- **Description**: Reset password using token received in email
- **Request Body**:
  ```json
  {
    "token": "string",
    "new_password": "string"
  }
  ```
- **Success Response**:
  - **Code**: 200
  - **Content**:
    ```json
    {
      "message": "Password has been reset successfully"
    }
    ```
- **Error Response**:
  - **Code**: 400 or 404
  - **Content**:
    ```json
    {
      "message": "string"
    }
    ```
