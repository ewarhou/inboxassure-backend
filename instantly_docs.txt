# InboxAssure API Documentation

## Authentication
For non-authenticated endpoints, you need to provide the following headers:

1. `Cookie`: Authentication token
   - Location: Found in `user_settings` table
   - Field: `instantly_user_token`
   - Format: Raw token value
   - Relationship: Associated with the user's account

2. `X-Org-Auth`: Organization authentication token
   - Location: Found in `user_instantly` table
   - Field: `instantly_organization_token`
   - Format: Raw token value
   - Relationship: Links to the organization(s) the user has access to

## Example Headers
```
Cookie: __session=your_instantly_user_token_here
X-Org-Auth: your_instantly_organization_token_here
```

## Note
- Both headers are required for non-authenticated endpoints
- Tokens must be valid and active
- Missing or invalid tokens will result in authentication errors
- One user can belong to multiple organizations

## Error Responses
Common authentication errors:

1. Missing Token
```json
{
    "detail": "Authentication credentials were not provided."
}
```

2. Invalid Token
```json
{
    "detail": "Invalid token."
}
```

3. Expired Token
```json
{
    "detail": "Token has expired."
}
```

4. Organization Access Denied
```json
{
    "detail": "You don't have access to this organization."
}
```

---
## Endpoints Documentation 

### 1. Create Campaign
**Endpoint:** POST /backend/api/v1/campaign/create

**Description:** Creates a new campaign in Instantly.ai

**Request Headers:**
```
Cookie: __session=<instantly_user_token>
X-Org-Auth: <instantly_organization_token>
Content-Type: application/json
```

**Request Body:**
```json
{
    "name": "string",     // Required: Name of the campaign
    "user_id": "string"   // Required: UUID of the user creating the campaign
}
```

**Success Response (200):**
```json
{
    "id": "uuid",                     // Campaign ID
    "timestamp_created": "datetime",  // ISO format
    "timestamp_updated": "datetime",  // ISO format
    "payload": {
        "name": "string",            // Campaign name
        "added_by": "uuid",          // User ID who added
        "updated_by": "uuid"         // User ID who last updated
    },
    "organization": "uuid",          // Organization ID
    "status": 0,                     // Campaign status
    "timestamp_leads_updated": "datetime",
    "pl_value": 1000,
    "campaign_schedule": null,
    "is_evergreen": null,
    "created_by": "uuid",            // User ID who created
    "owned_by": "uuid"              // User ID who owns
}
```

**Error Responses:**

1. Missing Required Field (400):
```json
{
    "error": "Could not create campaign - invalid name"
}
```

2. Invalid User ID (500):
```json
{
    "error": "Could not create campaign - please try again"
}
```

3. Malformed UUID (500):
```json
{
    "error": "Could not create campaign - please try again"
}
```

### 2. Get Campaign Data
**Endpoint:** POST /api/campaign/get_campaign_data

**Description:** Retrieves detailed information about a specific campaign.

**Request Headers:**
```
Cookie: __session=<instantly_user_token>
X-Org-Auth: <instantly_organization_token>
X-Org-Id: <organization_id>
Content-Type: application/json
```

**Request Body:**
```json
{
    "campaignID": "string"  // Required: UUID of the campaign
}
```

**Success Response (200):**
```json
{
    "campaign": {
        "payload": {
            "name": "string",            // Campaign name
            "added_by": "uuid",          // User ID who added the campaign
            "updated_by": "uuid"         // User ID who last updated the campaign
        },
        "status": 0,                     // Campaign status
        "pl_value": 1000,               // Pipeline value
        "campaign_schedule": null,       // Campaign schedule information
        "timestamp_created": "datetime", // ISO format creation timestamp
        "owned_by": "uuid",             // User ID who owns the campaign
        "not_sending_status": null      // Status when campaign is not sending
    }
}
```

**Error Responses:**

1. Access Denied (403):
```json
{
    "error": "Access Denied: No access to this campaign"
}
```

2. Invalid Campaign ID (404):
```json
{
    "error": "Campaign not found"
}
```

3. Missing Required Headers (401):
```json
{
    "error": "Missing required headers"
}
```

4. Invalid Organization ID (403):
```json
{
    "error": "Invalid organization ID"
}
```

### 3. Update Campaign Options
**Endpoint:** POST /api/campaign/update/options

**Description:** Updates the options and settings for a specific campaign.

**Request Headers:**
```
Cookie: __session=<instantly_user_token>
X-Org-Auth: <instantly_organization_token>
X-Org-Id: <organization_id>
Content-Type: application/json
```

**Request Body:**
```json
{
    "campaignID": "string",         // Required: UUID of the campaign
    "orgID": "string",             // Required: UUID of the organization
    "emailList": ["string"],       // Optional: Array of email addresses
    "openTracking": boolean,       // Optional: Enable/disable open tracking
    "linkTracking": boolean,       // Optional: Enable/disable link tracking
    "stopOnReply": boolean,        // Optional: Stop campaign on reply
    "stopOnAutoReply": boolean,    // Optional: Stop campaign on auto-reply
    "textOnly": boolean,           // Optional: Send text-only emails
    "dailyLimit": number,          // Optional: Daily sending limit
    "emailGap": number,           // Optional: Gap between emails in seconds
    "emailTagList": ["string"]    // Optional: Array of tag UUIDs to associate with the campaign
}
```

**Success Response (200):**
```json
{
    "status": "success"
}
```

**Error Responses:**

1. Access Denied (403):
```json
{
    "error": "Access Denied: No access to this campaign"
}
```

2. Invalid UUID Format (500):
```json
{
    "statusCode": 500,
    "code": "22P02",
    "error": "Internal Server Error",
    "message": "invalid input syntax for type uuid: \"invalid-uuid\""
}
```

3. Invalid Organization ID (500):
```json
{
    "statusCode": 500,
    "code": "22P02",
    "error": "Internal Server Error",
    "message": "invalid input syntax for type uuid: \"invalid-org-id\""
}
```

4. Invalid Tag ID Format (500):
```json
{
    "statusCode": 500,
    "code": "22P02",
    "error": "Internal Server Error",
    "message": "invalid input syntax for type uuid: \"invalid-tag-id\""
}
```

5. Missing Required Fields (403):
```json
{
    "error": "Access Denied: No access to this campaign"
}
```

### 3. Update Campaign Sequences
**Endpoint:** POST /api/campaign/update/sequences

**Description:** Updates the sequence steps for a campaign with support for multiple steps and A/B testing variants.

**Important Notes**:
- The API is sensitive to the exact structure of the request body
- HTML content must use `&nbsp;` for spaces (e.g., `<div>Hello&nbsp;from&nbsp;cursor</div>`)
- Do not include extra fields not specified in the structure below
- Maintain consistent JSON formatting

**Request Headers:**
```
Cookie: __session=<instantly_user_token>
X-Org-Auth: <instantly_organization_token>
X-Org-Id: <organization_id>
Content-Type: application/json
```

**Request Body Structure:**
```json
{
  "sequences": [{
    "steps": [{
      "type": "email",
      "variants": [{
        "subject": "string",
        "body": "string (HTML content with &nbsp; for spaces)"
      }]
    }]
  }],
  "campaignID": "string (UUID)",
  "orgID": "string (UUID)"
}
```

**Example Request Body:**
```json
{
  "sequences": [{
    "steps": [
      {
        "type": "email",
        "variants": [
          {
            "subject": "First Email A",
            "body": "<div>Hello&nbsp;-&nbsp;First&nbsp;variant&nbsp;A</div>"
          },
          {
            "subject": "First Email B",
            "body": "<div>Hello&nbsp;-&nbsp;First&nbsp;variant&nbsp;B</div>"
          }
        ]
      },
      {
        "type": "email",
        "variants": [
          {
            "subject": "Follow Up Email",
            "body": "<div>This&nbsp;is&nbsp;a&nbsp;follow-up</div>"
          }
        ]
      }
    ]
  }],
  "campaignID": "3bfdd2a0-65c4-48c9-90e6-c87a8aa25a50",
  "orgID": "460aac1e-e8e5-4431-b449-caa7c5ee1a6d"
}
```

**Success Response (200):**
```json
{
  "status": "success"
}
```

**Error Responses:**

1. Invalid Campaign ID or Organization ID (500):
```json
{
  "statusCode": 500,
  "code": "22P02",
  "error": "Internal Server Error",
  "message": "invalid input syntax for type uuid: \"invalid-uuid\""
}
```

2. Empty Sequences Array (200):
```json
{
  "error": "Error I503 - please contact support"
}
```

**Notes:**
- Each step can have multiple variants for A/B testing
- Email body must use HTML content with proper space encoding (`&nbsp;`)
- The structure must be followed exactly as shown
- Empty sequences array will result in an error

### List Accounts
**Endpoint:** POST /api/v1/account/list

**Description:** Retrieves a list of accounts with optional filtering, search, and tag inclusion.

**Request Headers:**
```
Cookie: __session=<instantly_user_token>
X-Org-Auth: <instantly_organization_token>
X-Org-Id: <organization_id>
Content-Type: application/json
```

**Request Body Parameters:**
```json
{
  "search": "string (optional)",
  "limit": "number (optional, default: 10)",
  "skip": "number (optional, default: 0)",
  "include_tags": "boolean (optional)",
  "filter": {
    "status": "number (optional, 1 for active)"
  }
}
```

**Success Response (200):**
```json
{
  "accounts": [{
    "email": "string",
    "timestamp_created": "string (ISO date)",
    "timestamp_updated": "string (ISO date)",
    "payload": {
      "name": {
        "last": "string",
        "first": "string"
      },
      "warmup": {
        "limit": "string",
        "advanced": {
          "warm_ctd": "boolean",
          "open_rate": "number",
          "random_range": {
            "max": "string",
            "min": "number"
          },
          "weekday_only": "boolean",
          "important_rate": "number",
          "read_emulation": "boolean",
          "spam_save_rate": "number"
        },
        "increment": "string",
        "reply_rate": "string"
      },
      "provider": "string",
      "daily_limit": "string",
      "sending_gap": "string",
      "enable_slow_ramp": "boolean"
    },
    "organization": "string (UUID)",
    "status": "number",
    "warmup_status": "number",
    "provider_code": "number",
    "stat_warmup_score": "number",
    "tags": [{
      "id": "string (UUID)",
      "label": "string",
      "description": "string",
      "resource_id": "string"
    }]
  }]
}
```

**Notes:**
- The `include_tags` parameter will include tag information in the response if set to true
- The `filter` object can be used to filter accounts by status (1 for active)
- The `search` parameter performs a text search across account fields
- Results are paginated using `limit` and `skip` parameters

