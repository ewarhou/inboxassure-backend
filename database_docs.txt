Comprehensive Database Documentation
1. accounts_results
Tracks individual email delivery test results.
Columns:

id (UUID, PK): Auto-generated unique identifier
report_id (UUID): Reference to the report
domain (varchar): The tested domain
report_link (text, nullable): Link to detailed report
score (numeric, nullable): Overall score
google_pro_score (varchar, nullable): Google-specific score
outlook_pro_score (varchar, nullable): Outlook-specific score
created_at (timestamp): Creation timestamp
tags (text, nullable): Associated tags
campaigns (text, nullable): Associated campaigns

Example Row:
jsonCopy{
  "id": "bb36f6e7-0838-4467-b1ce-2b5bf987e4fb",
  "domain": "procoachedge.com",
  "google_pro_score": "4/4",
  "outlook_pro_score": "0/4",
  "tags": "p.Maildoso, Google Good, Outlook Bad",
  "campaigns": "CoachPro for RIA's v2 - Other & Google, RSCP: Accountants (Aug 22)"
}
2. inboxassure_clients
Stores client information.
Columns:

id (UUID, PK): Auto-generated unique identifier
client_email (varchar): Client's email address
created_at (timestamp): Creation timestamp
updated_at (timestamp): Last update timestamp

Example Row:
jsonCopy{
  "id": "52465294-3e44-4137-931f-9f276decaf09",
  "client_email": "jason@vitalitymarketingfirm.com",
  "created_at": "2024-12-17T23:24:49.933854+00:00",
  "updated_at": "2024-12-17T23:24:49.933854+00:00"
}
3. user_spamcheck_bison_reports
Stores Bison spamcheck report results.
Columns:

id (UUID, PK): Auto-generated unique identifier
bison_organization (FK): Reference to UserBison
email_account (EmailField): Email account tested
report_link (URLField): Link to detailed report
google_pro_score (DecimalField): Google score (0-4, 1 decimal place)
outlook_pro_score (DecimalField): Outlook score (0-4, 1 decimal place)
is_good (boolean): Whether this account meets the spamcheck conditions (default: False)
spamcheck_bison (FK, nullable): Reference to UserSpamcheckBison
used_subject (text, nullable): Subject used in the spamcheck campaign
used_body (text, nullable): Body used in the spamcheck campaign
sending_limit (integer, nullable): Sending limit used in the campaign
tags_list (text, nullable): List of tags used in the campaign
workspace_name (varchar(255), nullable): Name of the workspace
created_at (timestamp): Creation timestamp

Example Row:
jsonCopy{
  "id": "uuid-string",
  "email_account": "test@example.com",
  "report_link": "https://app.emailguard.io/reports/uuid",
  "google_pro_score": 3.5,
  "outlook_pro_score": 4.0,
  "is_good": true,
  "used_subject": "Test Email Campaign",
  "used_body": "This is a test email body...",
  "sending_limit": 25,
  "tags_list": "tag1,tag2,tag3",
  "workspace_name": "My Bison Workspace",
  "created_at": "2024-03-20T10:30:00Z"
}
4. inboxassure_organizations
Manages organization details.
Columns:

id (UUID, PK): Auto-generated unique identifier
name (varchar): Organization name
created_at (timestamp): Creation timestamp
updated_at (timestamp): Last update timestamp

Example Row:
jsonCopy{
  "id": "666c1d9f-3a81-4106-85c9-828a1fac4b8b",
  "name": "karpos",
  "created_at": "2024-12-17T23:25:15.251115+00:00",
  "updated_at": "2024-12-17T23:25:15.251115+00:00"
}
5. client_organizations
Junction table linking clients to organizations.
Columns:

id (UUID, PK): Auto-generated unique identifier
client_id (UUID, FK): Reference to inboxassure_clients
organization_id (UUID, FK): Reference to inboxassure_organizations
created_at (timestamp): Creation timestamp

Example Row:
jsonCopy{
  "id": "9d8c4dae-684e-487d-95b5-cdcd1ec35eb3",
  "client_id": "52465294-3e44-4137-931f-9f276decaf09",
  "organization_id": "666c1d9f-3a81-4106-85c9-828a1fac4b8b",
  "created_at": "2024-12-17T23:25:32.216581+00:00"
}
6. inboxassure_reports
Stores aggregate email delivery metrics.
Columns:

id (UUID, PK): Auto-generated unique identifier
client_id (UUID, FK): Reference to client
organization_id (UUID, FK): Reference to organization
total_accounts (integer): Default 0
sending_power (integer): Default 0
google_good (integer): Default 0
google_bad (integer): Default 0
outlook_good (integer): Default 0
outlook_bad (integer): Default 0
report_datetime (timestamp): Report generation time
created_at & updated_at (timestamp): Timestamps

Example Row:
jsonCopy{
  "id": "c89c7ec2-3a26-4cf3-8273-a1093c00c070",
  "total_accounts": 269,
  "sending_power": 1301,
  "google_good": 43,
  "google_bad": 226,
  "outlook_good": 20,
  "outlook_bad": 249
}
7. provider_performance
Detailed provider-specific metrics.
Columns:

id (UUID, PK): Auto-generated unique identifier
report_id (UUID, FK): Reference to report
provider (varchar): Provider name
total_checked_inboxes (integer): Default 0
good_accounts_percent (numeric): Default 0
bad_accounts_percent (numeric): Default 0
google_good_percent (numeric): Default 0
google_bad_percent (numeric): Default 0
outlook_good_percent (numeric): Default 0
outlook_bad_percent (numeric): Default 0
reply_rate (numeric, nullable): Reply rate
bounce_rate (numeric, nullable): Bounce rate
created_at (timestamp): Creation timestamp

Example Row:
jsonCopy{
  "id": "86ed18b5-3838-4578-8b13-d20638260fc2",
  "provider": "Maildoso",
  "total_checked_inboxes": 120,
  "good_accounts_percent": 100,
  "google_good_percent": 102.5,
  "outlook_good_percent": 16.67,
  "reply_rate": 0.6,
  "bounce_rate": 0.45
}
8. user_spamcheck_instantly
Manages spamcheck configurations and status.
Columns:

id (BigInt, PK): Auto-generated unique identifier
user_id (BigInt, FK): Reference to auth_user
user_organization_id (BigInt, FK): Reference to user_instantly
options_id (BigInt, FK, nullable): Reference to user_spamcheck_campaign_instantly_options
name (varchar): Name of the spamcheck (unique within user and organization)
status (varchar): Current status (pending, in_progress, generating_reports, completed, failed, paused)
is_domain_based (boolean): Whether to filter accounts by domain and use one per domain
scheduled_at (timestamp): When the spamcheck is scheduled to run
recurring_days (integer, nullable): Number of days for recurring checks
conditions (varchar, nullable): Conditions for sending limit (e.g., 'google>=0.5andoutlook>=0.5sending=10/0')
reports_waiting_time (float, nullable): Time in hours to wait before generating reports (0 for immediate, 0.5 for 30min, 1 for 1h, etc). Default is 1h
created_at (timestamp): Creation timestamp
updated_at (timestamp): Last update timestamp (auto-updated on every save)

Example Row:
{
  "id": 1,
  "name": "Weekly Spam Check",
  "scheduled_at": "2024-03-20T10:00:00Z",
  "recurring_days": 7,
  "status": "pending",
  "conditions": "google>=0.5andoutlook>=0.5sending=10/0",
  "reports_waiting_time": 1.0,
  "is_domain_based": false
}

9. user_spamcheck_campaign_instantly_options
Stores campaign configuration options for spamchecks.
Columns:

id (BigInt, PK): Auto-generated unique identifier
spamcheck_id (BigInt, FK): Reference to user_spamcheck_instantly
open_tracking (boolean): Whether to track email opens
link_tracking (boolean): Whether to track link clicks
text_only (boolean): Whether to send text-only emails
subject (varchar): Email subject template
body (text): Email body template

Example Row:
{
  "id": 1,
  "open_tracking": true,
  "link_tracking": true,
  "text_only": false,
  "subject": "Test Email Subject",
  "body": "This is a test email body"
}

10. user_spamcheck_accounts_instantly
Manages email accounts for spamchecks.
Columns:

id (BigInt, PK): Auto-generated unique identifier
user_id (BigInt, FK): Reference to auth_user
organization_id (BigInt, FK): Reference to user_instantly
spamcheck_id (BigInt, FK): Reference to user_spamcheck_instantly
email_account (varchar, nullable): Email account to use (validated)
created_at (timestamp): Creation timestamp
updated_at (timestamp): Last update timestamp

Example Row:
{
  "id": 1,
  "email_account": "test@example.com",
  "created_at": "2024-03-20T09:00:00Z",
  "updated_at": "2024-03-20T09:00:00Z"
}

11. user_spamcheck_campaigns_instantly
Tracks individual campaigns within a spamcheck.
Columns:

id (BigInt, PK): Auto-generated unique identifier
user_id (BigInt, FK): Reference to auth_user
spamcheck_id (BigInt, FK): Reference to user_spamcheck_instantly
organization_id (BigInt, FK): Reference to user_instantly
account_id (BigInt, FK, nullable): Reference to user_spamcheck_accounts_instantly
instantly_campaign_id (varchar): ID from Instantly service
emailguard_tag (varchar): Tag for EmailGuard tracking
campaign_status (varchar): Current campaign status (active, completed, deleted), default: active
created_at (timestamp): Creation timestamp
updated_at (timestamp): Last update timestamp

Example Row:
{
  "id": 1,
  "instantly_campaign_id": "camp_123456",
  "emailguard_tag": "tag_123456",
  "campaign_status": "active",
  "created_at": "2024-03-20T09:30:00Z",
  "updated_at": "2024-03-20T09:30:00Z"
}

12. user_spamcheck_reports
Stores spamcheck report results.
Columns:

id (UUID, PK): Auto-generated unique identifier
organization_id (BigInt, FK): Reference to user_instantly
email_account (varchar): Email account tested
report_link (URL): Link to detailed report
google_pro_score (decimal): Google score (0-4, 1 decimal place)
outlook_pro_score (decimal): Outlook score (0-4, 1 decimal place)
is_good (boolean): Whether this account meets the spamcheck conditions (default: False)
spamcheck_instantly_id (BigInt, FK, nullable): Reference to user_spamcheck_instantly
used_subject (text, nullable): Subject used in the spamcheck campaign
used_body (text, nullable): Body used in the spamcheck campaign
sending_limit (integer, nullable): Sending limit used in the campaign
tags_uuid_list (text, nullable): List of tag UUIDs used in the campaign
instantly_workspace_uuid (varchar, nullable): UUID of the Instantly workspace
bison_workspace_uuid (varchar, nullable): UUID of the Bison workspace
created_at (timestamp): Creation timestamp

Example Row:
{
  "id": "uuid-string",
  "email_account": "test@example.com",
  "report_link": "https://app.emailguard.io/reports/uuid",
  "google_pro_score": 3.5,
  "outlook_pro_score": 4.0,
  "is_good": true,
  "used_subject": "Test Email Campaign",
  "used_body": "This is a test email body...",
  "sending_limit": 25,
  "tags_uuid_list": "uuid1,uuid2,uuid3",
  "instantly_workspace_uuid": "ws_123456",
  "bison_workspace_uuid": "bison_123456",
  "created_at": "2024-03-20T10:30:00Z"
}

Relationships:
- user_spamcheck_instantly.options_id → user_spamcheck_campaign_instantly_options.id (One-to-One)
- user_spamcheck_accounts_instantly.spamcheck_id → user_spamcheck_instantly.id (Many-to-One)
- user_spamcheck_campaigns_instantly.spamcheck_id → user_spamcheck_instantly.id (Many-to-One)
- user_spamcheck_campaigns_instantly.account_id → user_spamcheck_accounts_instantly.id (Many-to-One)
- user_spamcheck_reports.spamcheck_instantly_id → user_spamcheck_instantly.id (Many-to-One)
- All tables have user_id linking to auth_user (Many-to-One)
- All tables have organization_id linking to user_instantly (Many-to-One)

Key Constraints:
- Spamcheck names must be unique within a user and organization combination
- Options are linked one-to-one with spamchecks
- Campaigns must reference valid accounts and spamchecks
- All foreign key relationships maintain referential integrity
- Score fields are validated to be between 0 and 4 with 1 decimal place
- Email fields are validated before saving

Status Workflows:
1. Spamcheck Statuses:
   - pending: Initial state, ready to run
   - in_progress: Currently running
   - generating_reports: Collecting and processing results
   - completed: Finished successfully
   - failed: Error occurred
   - paused: Temporarily suspended

2. Campaign Statuses:
   - active: Currently running
   - completed: Finished
   - deleted: Removed from system

Recent Changes:
1. Added 'paused' status to spamcheck statuses
2. Added reports_waiting_time field for configurable report generation delay
3. Added is_domain_based flag for domain-based filtering
4. Enhanced score validation (0-4 range with 1 decimal)
5. Added recurring_days for scheduled repetition
6. Added conditions field for custom sending rules
7. Improved email validation on accounts
8. Added auto-update of updated_at timestamps
9. Added unique constraint on spamcheck names within user+organization scope

Best Practices:
1. Always validate email addresses before saving
2. Use transactions for related operations
3. Check status constraints before updates
4. Maintain referential integrity
5. Use appropriate indexes for frequent queries
6. Handle recurring checks efficiently
7. Validate scores within allowed range
8. Respect unique constraints
9. Use appropriate cascade behaviors for deletions
10. Keep audit trail via timestamps

Detailed Database Structure
Tables and Their Columns
1. accounts_results

Primary Key: id (uuid)
Required Fields:

report_id (uuid)
domain (varchar)


Optional Fields:

report_link (text)
score (numeric)
google_pro_score (varchar)
outlook_pro_score (varchar)
tags (text)
campaigns (text)


Timestamps: created_at

2. client_organizations (Junction Table)

Primary Key: id (uuid)
Required Fields:

client_id (uuid) → References inboxassure_clients
organization_id (uuid) → References inboxassure_organizations


Timestamps: created_at

3. inboxassure_clients

Primary Key: id (uuid)
Required Fields:

client_email (varchar)


Timestamps: created_at, updated_at

4. inboxassure_organizations

Primary Key: id (uuid)
Required Fields:

name (varchar)


Timestamps: created_at, updated_at

5. inboxassure_reports

Primary Key: id (uuid)
Required Fields:

client_id (uuid)
organization_id (uuid)
total_accounts (integer, default: 0)
sending_power (integer, default: 0)
google_good (integer, default: 0)
google_bad (integer, default: 0)
outlook_good (integer, default: 0)
outlook_bad (integer, default: 0)


Timestamps: report_datetime, created_at, updated_at

6. provider_performance

Primary Key: id (uuid)
Required Fields:

report_id (uuid)
provider (varchar)
total_checked_inboxes (integer, default: 0)
Various percentage fields (numeric, default: 0):

good_accounts_percent
bad_accounts_percent
google_good_percent
google_bad_percent
outlook_good_percent
outlook_bad_percent




Optional Fields:

reply_rate (numeric)
bounce_rate (numeric)


Timestamps: created_at

Regarding auth_user Relationship
From the provided schema, there's no direct relationship visible between auth_user and inboxassure_clients. The auth_user table isn't present in the schema, suggesting either:

It's in a different schema
Authentication is handled separately
The relationship might be managed at the application level

If you need to establish this relationship, you'd need to:

First check if the auth_user table exists
Then potentially add a foreign key from inboxassure_clients to auth_user

Best Practices for Database Operations
====================================

1. UUID Handling
---------------
```python
# Always format UUIDs properly
client_uuid = str(uuid.UUID(raw_uuid))  # Ensures proper UUID format with dashes
```

2. Raw SQL vs ORM
----------------
```python
# Use Raw SQL when precise control is needed (especially with UUIDs)
with connection.cursor() as cursor:
    query = """
        SELECT id, name 
        FROM table 
        WHERE uuid_field = %s
    """
    cursor.execute(query, [str(uuid_value)])
    rows = cursor.fetchall()

# Use Django ORM for simpler queries
Model.objects.filter(simple_field="value")
```

3. Debugging Database Issues
--------------------------
```python
# Print SQL queries
print(f"Query: {str(queryset.query)}")  # For ORM
print(f"Executing query: {query} with params: {params}")  # For Raw SQL

# Print results count
print(f"Found {len(results)} records")

# Print actual data
for row in results:
    print(f"  - ID: {row.id}, Value: {row.value}")
```

4. Joins and Relations
--------------------
```python
# Use select_related() for foreign keys to reduce queries
queryset = Model.objects.select_related('foreign_key').filter(...)

# Raw SQL for complex joins
query = """
    SELECT a.*, b.* 
    FROM table_a a
    JOIN table_b b ON a.id = b.a_id
    WHERE a.client_id = %s
"""
```

5. Error Prevention
-----------------
```python
# Always validate UUIDs
try:
    uuid_obj = uuid.UUID(uuid_string)
except ValueError:
    print("Invalid UUID format")

# Check for empty results
if not results:
    print("❌ No data found")
    return []
```

Common Issues to Watch For:
-------------------------
- UUID formatting problems (missing dashes)
- Empty results without clear reasons
- Hard-to-debug database queries
- Performance issues with multiple queries
- Data type mismatches between Python and Database

When to Use Raw SQL vs ORM:
-------------------------
- Use Raw SQL when:
  * Working with UUIDs
  * Need precise control over the query
  * Complex joins or aggregations
  * Performance is critical

- Use Django ORM when:
  * Simple CRUD operations
  * Basic filtering and sorting
  * Working with simple relationships
  * Quick prototyping

# InboxAssure Database Documentation

## Tables Overview

### 1. user_settings
Stores user-specific settings and API credentials.

| Column Name                | Type          | Nullable | Description                                        |
|---------------------------|---------------|----------|----------------------------------------------------|
| id                        | BigInt        | No       | Primary key                                        |
| user_id                   | BigInt        | No       | Foreign key to auth_user table                     |
| instantly_editor_email    | Email         | Yes      | Email for Instantly editor account                 |
| instantly_editor_password | Varchar(255)  | Yes      | Password for Instantly editor account              |
| instantly_user_id         | Varchar(255)  | Yes      | User ID from Instantly API (UUID format)           |
| bison_base_url           | URL           | Yes      | Base URL for Bison service (default: app.orbitmailboost.com) |
| emailguard_api_key       | Varchar(255)  | Yes      | API key for EmailGuard service                     |
| instantly_user_token     | Text          | Yes      | Session token for Instantly user                   |
| instantly_status         | Boolean       | Yes      | Status of Instantly connection (default: False)    |
| emailguard_status        | Boolean       | Yes      | Status of EmailGuard connection (default: False)   |
| last_token_refresh       | DateTime      | Yes      | Timestamp of last token refresh                    |
| created_at               | DateTime      | No       | Record creation timestamp                          |
| updated_at               | DateTime      | No       | Record last update timestamp                       |

### 2. user_bison
Stores Bison organization configurations for users.

| Column Name                  | Type          | Nullable | Description                                      |
|-----------------------------|---------------|-----------|--------------------------------------------------|
| id                          | BigInt        | No       | Primary key                                      |
| user_id                     | BigInt        | No       | Foreign key to auth_user table                   |
| bison_organization_name     | Varchar(255)  | No       | Name of the Bison organization                   |
| bison_organization_api_key  | Varchar(255)  | No       | API key for the Bison organization              |
| bison_organization_status   | Boolean       | Yes      | Status of organization connection (default: False)|
| created_at                  | DateTime      | No       | Record creation timestamp                        |
| updated_at                  | DateTime      | No       | Record last update timestamp                     |

### 3. user_instantly
Stores Instantly organization configurations for users.

| Column Name                    | Type          | Nullable | Description                                    |
|-------------------------------|---------------|-----------|------------------------------------------------|
| id                            | BigInt        | No       | Primary key                                    |
| user_id                       | BigInt        | No       | Foreign key to auth_user table                 |
| instantly_organization_id     | Varchar(255)  | No       | ID of the Instantly organization (UUID)        |
| instantly_organization_name   | Varchar(255)  | No       | Name of the Instantly organization            |
| instantly_organization_token  | Text          | Yes      | Authentication token for the organization     |
| instantly_organization_status | Boolean       | Yes      | Status of organization connection (default: False)|
| instantly_api_key            | Varchar(255)  | Yes      | API key for the Instantly organization        |
| last_token_refresh           | DateTime      | Yes      | Timestamp of last token refresh                |
| created_at                    | DateTime      | No       | Record creation timestamp                      |
| updated_at                    | DateTime      | No       | Record last update timestamp                   |

## Relationships

1. `user_settings.user_id` → `auth_user.id` (One-to-One)
2. `user_bison.user_id` → `auth_user.id` (Many-to-One)
3. `user_instantly.user_id` → `auth_user.id` (Many-to-One)

## Notes

1. All tables use `created_at` and `updated_at` for tracking record timestamps
2. Boolean fields default to False unless explicitly set
3. Token-related fields are stored as Text to accommodate varying token lengths
4. API keys and credentials are stored as-is (consider encryption for production)
5. URLs and Email fields have built-in validation
6. All IDs are BigInt for scalability
7. Organization IDs from Instantly are stored in UUID format
8. Each Instantly organization can have its own API key
9. User ID from Instantly is stored in UUID format in user_settings

## Recent Changes

1. Moved `instantly_api_key` from `user_settings` to `user_instantly` table
   - Each organization can now have its own API key
   - API keys are managed at the organization level
   - This allows for better organization-specific API access control

2. Added `instantly_user_id` to `user_settings`
   - Stores the UUID of the user from Instantly's API
   - Used for tracking and linking user identity across systems
   - Retrieved during authentication process

11. user_profile
Manages user profile settings.
Columns:

id (BigInt, PK): Auto-generated unique identifier
user_id (BigInt, FK): Reference to auth_user
timezone (varchar): User's timezone (default: 'UTC')
created_at (timestamp): Creation timestamp
updated_at (timestamp): Last update timestamp

Example Row:
jsonCopy{
  "id": 1,
  "user_id": 1,
  "timezone": "America/New_York",
  "created_at": "2024-03-20T09:00:00Z",
  "updated_at": "2024-03-20T09:00:00Z"
}

12. user_spamcheck_bison
Manages Bison spamcheck configurations and status.
Columns:

id (BigInt, PK): Auto-generated unique identifier
user_id (BigInt, FK): Reference to auth_user
user_organization_id (BigInt, FK): Reference to user_bison
name (varchar): Name of the spamcheck (unique within user and organization)
status (varchar): Current status (pending, in_progress, generating_reports, completed, failed, paused)
is_domain_based (boolean): Whether to filter accounts by domain and use one per domain
scheduled_at (timestamp): When the spamcheck is scheduled to run
recurring_days (integer, nullable): Number of days for recurring checks
conditions (varchar, nullable): Conditions for sending limit (e.g., 'google>=0.5andoutlook>=0.5')
reports_waiting_time (float, nullable): Time in hours to wait before generating reports (0 for immediate, 0.5 for 30min, 1 for 1h, etc). Default is 1h
plain_text (boolean): Whether to send text-only emails
subject (text): Email subject template
body (text): Email body template
created_at (timestamp): Creation timestamp
updated_at (timestamp): Last update timestamp (auto-updated on every save)

Example Row:
{
  "id": 1,
  "name": "Weekly Bison Check",
  "scheduled_at": "2024-03-20T10:00:00Z",
  "recurring_days": 7,
  "status": "pending",
  "conditions": "google>=0.5andoutlook>=0.5",
  "reports_waiting_time": 1.0,
  "is_domain_based": false,
  "plain_text": true,
  "subject": "Test Email Subject",
  "body": "Test Email Body"
}

13. user_spamcheck_accounts_bison
Manages email accounts for Bison spamchecks.
Columns:

id (BigInt, PK): Auto-generated unique identifier
user_id (BigInt, FK): Reference to auth_user
organization_id (BigInt, FK): Reference to user_bison
bison_spamcheck_id (BigInt, FK): Reference to user_spamcheck_bison
email_account (varchar, nullable): Email account to use (validated)
last_emailguard_tag (varchar, nullable): Last used EmailGuard tag UUID for this account
created_at (timestamp): Creation timestamp
updated_at (timestamp): Last update timestamp

Example Row:
{
  "id": 1,
  "email_account": "test@example.com",
  "last_emailguard_tag": "550e8400-e29b-41d4-a716-446655440000",
  "created_at": "2024-03-20T09:00:00Z",
  "updated_at": "2024-03-20T09:00:00Z"
}

Relationships:
- user_spamcheck_bison.user_id → auth_user.id (Many-to-One)
- user_spamcheck_bison.user_organization_id → user_bison.id (Many-to-One)
- user_spamcheck_accounts_bison.bison_spamcheck_id → user_spamcheck_bison.id (Many-to-One)
- user_spamcheck_accounts_bison.user_id → auth_user.id (Many-to-One)
- user_spamcheck_accounts_bison.organization_id → user_bison.id (Many-to-One)

Key Constraints:
- Spamcheck names must be unique within a user and organization combination
- Email fields are validated before saving
- All foreign key relationships maintain referential integrity

Status Workflows for Bison Spamcheck:
1. pending: Initial state, ready to run
2. in_progress: Currently running
3. generating_reports: Collecting and processing results
4. completed: Finished successfully
5. failed: Error occurred
6. paused: Temporarily suspended



Ctrl+K to generate a comprehensive database documentation for the following database: