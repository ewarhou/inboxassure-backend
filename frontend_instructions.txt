# InboxAssure Backend API Documentation

Base URL: http://inboxassure-backend.imnodev.com/api

## Important: API Usage Guide

### CORS and URL Format
1. Always use URLs WITHOUT trailing slashes to avoid CORS preflight issues
   ```javascript
   // ✅ Correct
   http://inboxassure-backend.imnodev.com/api/profile
   http://inboxassure-backend.imnodev.com/api/auth/login
   
   // ❌ Incorrect (will cause CORS issues)
   http://inboxassure-backend.imnodev.com/api/profile/
   http://inboxassure-backend.imnodev.com/api/auth/login/
   ```

### Axios Configuration Example
```javascript
import axios from 'axios';

const api = axios.create({
  baseURL: 'http://inboxassure-backend.imnodev.com/api',
  headers: {
    'Content-Type': 'application/json',
  }
});

// For authenticated requests
api.interceptors.request.use((config) => {
  const token = localStorage.getItem('token'); // or however you store your token
  if (token) {
    config.headers.Authorization = `Bearer ${token}`;
  }
  
  // Remove trailing slashes from URL
  config.url = config.url?.replace(/\/+$/, '');
  
  return config;
});

// Example usage:
const getProfile = () => api.get('/profile');  // Note: no trailing slash
const login = (data) => api.post('/auth/login', data);  // Note: no trailing slash
```

### Fetch Configuration Example
```javascript
const API_BASE = 'http://inboxassure-backend.imnodev.com/api';

// Helper function to remove trailing slashes
const formatUrl = (url) => url.replace(/\/+$/, '');

// Example authenticated request
const getProfile = async () => {
  const token = localStorage.getItem('token');
  const response = await fetch(formatUrl(`${API_BASE}/profile`), {
    method: 'GET',
    headers: {
      'Content-Type': 'application/json',
      'Authorization': `Bearer ${token}`
    }
  });
  return response.json();
};

// Example login request
const login = async (data) => {
  const response = await fetch(formatUrl(`${API_BASE}/auth/login`), {
    method: 'POST',
    headers: {
      'Content-Type': 'application/json'
    },
    body: JSON.stringify(data)
  });
  return response.json();
};
```

### Common Issues and Solutions
1. If you get CORS preflight errors:
   - Ensure you're not using trailing slashes in your URLs
   - Don't include `withCredentials: true` in your requests
   - Make sure your Authorization header is properly formatted

2. For file uploads (like profile picture):
   - Don't set Content-Type header, let the browser set it automatically
   - Use FormData for file uploads

3. For authenticated requests:
   - Always include the Bearer token in the Authorization header
   - Token format: `Bearer your_token_here`

## API Endpoints

All authenticated endpoints require Bearer token in the Authorization header:
```
Authorization: Bearer <access_token>
```

### Authentication Endpoints

#### Register
- **URL**: `/auth/register` (no trailing slash)
- **Method**: `POST`
- **Auth**: No
- **Payload**:
```json
{
    "username": "string",
    "email": "string",
    "password": "string",
    "first_name": "string (optional)",
    "last_name": "string (optional)"
}
```
- **Response (200)**:
```json
{
    "access_token": "string",
    "token_type": "bearer"
}
```

#### Login
- **URL**: `/auth/login` (no trailing slash)
- **Method**: `POST`
- **Auth**: No
- **Payload**:
```json
{
    "email": "string",
    "password": "string"
}
```
- **Response (200)**:
```json
{
    "access_token": "string",
    "token_type": "bearer"
}
```

### Profile Endpoints

#### Get Profile
- **URL**: `/profile` (no trailing slash)
- **Method**: `GET`
- **Auth**: Yes
- **Response (200)**:
```json
{
    "first_name": "string",
    "last_name": "string",
    "email": "string",
    "profile_picture": "string (URL)",
    "timezone": "string"
}
```

#### Update Profile
- **URL**: `/profile` (no trailing slash)
- **Method**: `PUT`
- **Auth**: Yes
- **Payload**:
```json
{
    "first_name": "string (optional)",
    "last_name": "string (optional)",
    "timezone": "string (optional)"
}
```
- **Response (200)**:
```json
{
    "first_name": "string",
    "last_name": "string",
    "email": "string",
    "profile_picture": "string (URL)",
    "timezone": "string"
}
```

### Settings Endpoints

#### Add Instantly Editor Account
- **URL**: `/settings/add-instantly-editor-account` (no trailing slash)
- **Method**: `POST`
- **Auth**: Yes
- **Payload**:
```json
{
    "instantly_editor_email": "string",
    "instantly_editor_password": "string"
}
```

## Error Responses

All endpoints may return these error responses:

### 400 Bad Request
```json
{
    "detail": "Error message"
}
```

### 401 Unauthorized
```json
{
    "detail": "Invalid credentials"
}
```

### 404 Not Found
```json
{
    "detail": "Resource not found"
}
```