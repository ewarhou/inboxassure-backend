# InboxAssure Backend API Documentation

Base URL: http://inboxassure-backend.imnodev.com/api

All authenticated endpoints require Bearer token in the Authorization header:
```
Authorization: Bearer <access_token>
```

## Authentication Endpoints

### Register
- **URL**: `/auth/register`
- **Method**: `POST`
- **Auth**: No
- **Payload**:
```json
{
    "username": "string",
    "email": "string",
    "password": "string",
    "first_name": "string (optional)",
    "last_name": "string (optional)"
}
```
- **Response (200)**:
```json
{
    "access_token": "string",
    "token_type": "bearer"
}
```

### Login
- **URL**: `/auth/login`
- **Method**: `POST`
- **Auth**: No
- **Payload**:
```json
{
    "email": "string",
    "password": "string"
}
```
- **Response (200)**:
```json
{
    "access_token": "string",
    "token_type": "bearer"
}
```

### Password Reset Request
- **URL**: `/auth/password-reset-request`
- **Method**: `POST`
- **Auth**: No
- **Payload**:
```json
{
    "email": "string"
}
```
- **Response (200)**:
```json
{
    "message": "Password reset email sent"
}
```

### Verify Reset Token
- **URL**: `/auth/password-reset-verify`
- **Method**: `POST`
- **Auth**: No
- **Payload**:
```json
{
    "token": "string"
}
```
- **Response (200)**:
```json
{
    "valid": true
}
```

### Confirm Password Reset
- **URL**: `/auth/password-reset-confirm`
- **Method**: `POST`
- **Auth**: No
- **Payload**:
```json
{
    "token": "string",
    "new_password": "string"
}
```
- **Response (200)**:
```json
{
    "message": "Password has been reset successfully"
}
```

### Change Password
- **URL**: `/auth/change-password`
- **Method**: `POST`
- **Auth**: Yes
- **Payload**:
```json
{
    "old_password": "string",
    "new_password": "string"
}
```
- **Response (200)**:
```json
{
    "message": "Password changed successfully"
}
```

## Profile Endpoints

### Get Profile
- **URL**: `/profile/`
- **Method**: `GET`
- **Auth**: Yes
- **Response (200)**:
```json
{
    "first_name": "string",
    "last_name": "string",
    "email": "string",
    "profile_picture": "string (URL)",
    "timezone": "string"
}
```

### Update Profile
- **URL**: `/profile/`
- **Method**: `PUT`
- **Auth**: Yes
- **Payload**:
```json
{
    "first_name": "string (optional)",
    "last_name": "string (optional)",
    "timezone": "string (optional)"
}
```
- **Response (200)**:
```json
{
    "first_name": "string",
    "last_name": "string",
    "email": "string",
    "profile_picture": "string (URL)",
    "timezone": "string"
}
```

### Update Profile Picture
- **URL**: `/profile/picture`
- **Method**: `PUT`
- **Auth**: Yes
- **Payload**: Form Data with 'file' field containing image
- **Response (200)**:
```json
{
    "first_name": "string",
    "last_name": "string",
    "email": "string",
    "profile_picture": "string (URL)",
    "timezone": "string"
}
```

## Settings Endpoints

### Instantly Editor Account

#### Add Instantly Editor Account
- **URL**: `/settings/add-instantly-editor-account`
- **Method**: `POST`
- **Auth**: Yes
- **Payload**:
```json
{
    "instantly_editor_email": "string",
    "instantly_editor_password": "string"
}
```
- **Response (200)**:
```json
{
    "message": "Instantly editor account added successfully",
    "data": {
        "instantly_editor_email": "string",
        "instantly_editor_password": "string"
    }
}
```

#### Update Instantly Editor Account
- **URL**: `/settings/update-instantly-editor-account`
- **Method**: `PUT`
- **Auth**: Yes
- **Payload**: Same as Add
- **Response (200)**: Same as Add

#### Delete Instantly Editor Account
- **URL**: `/settings/delete-instantly-editor-account`
- **Method**: `DELETE`
- **Auth**: Yes
- **Response (200)**:
```json
{
    "message": "Instantly editor account deleted successfully",
    "data": {}
}
```

### Instantly API Key

#### Add Instantly API Key
- **URL**: `/settings/add-instantly-api-key`
- **Method**: `POST`
- **Auth**: Yes
- **Payload**:
```json
{
    "organization_id": "integer",
    "instantly_api_key": "string"
}
```
- **Response (200)**:
```json
{
    "message": "Instantly API key added successfully",
    "data": {
        "organization_id": "string",
        "organization_name": "string",
        "instantly_api_key": "string"
    }
}
```

#### Check Instantly API Key
- **URL**: `/settings/check-instantly-api-key/{org_id}`
- **Method**: `GET`
- **Auth**: Yes
- **Response (200)**:
```json
{
    "status": "boolean",
    "message": "string"
}
```

### EmailGuard API Key

#### Add EmailGuard API Key
- **URL**: `/settings/add-emailguard-api-key`
- **Method**: `POST`
- **Auth**: Yes
- **Payload**:
```json
{
    "emailguard_api_key": "string"
}
```
- **Response (200)**:
```json
{
    "message": "EmailGuard API key added successfully",
    "data": {
        "emailguard_api_key": "string"
    }
}
```

#### Update EmailGuard API Key
- **URL**: `/settings/update-emailguard-api-key`
- **Method**: `PUT`
- **Auth**: Yes
- **Payload**: Same as Add
- **Response (200)**: Same as Add

#### Delete EmailGuard API Key
- **URL**: `/settings/delete-emailguard-api-key`
- **Method**: `DELETE`
- **Auth**: Yes
- **Response (200)**:
```json
{
    "message": "EmailGuard API key deleted successfully",
    "data": {}
}
```

### Bison Organizations

#### Add Bison Organization
- **URL**: `/settings/add-bison-organization`
- **Method**: `POST`
- **Auth**: Yes
- **Payload**:
```json
{
    "bison_organization_id": "string",
    "bison_organization_name": "string",
    "bison_api_key": "string"
}
```
- **Response (200)**:
```json
{
    "message": "Bison organization added successfully",
    "data": {
        "bison_organization_id": "string",
        "bison_organization_name": "string",
        "bison_api_key": "string"
    }
}
```

#### Update Bison Organization
- **URL**: `/settings/update-bison-organization/{org_id}`
- **Method**: `PUT`
- **Auth**: Yes
- **Payload**: Same as Add
- **Response (200)**: Same as Add

#### Delete Bison Organization
- **URL**: `/settings/delete-bison-organization/{org_id}`
- **Method**: `DELETE`
- **Auth**: Yes
- **Response (200)**:
```json
{
    "message": "Bison organization deleted successfully",
    "data": {}
}
```

#### List Organizations
- **URL**: `/settings/list-bison-organizations`
- **Method**: `GET`
- **Auth**: Yes
- **Response (200)**:
```json
[
    {
        "id": "integer",
        "bison_organization_id": "string",
        "bison_organization_name": "string",
        "bison_api_key": "string",
        "bison_organization_status": "boolean"
    }
]
```

#### List Instantly Organizations
- **URL**: `/settings/list-instantly-organizations`
- **Method**: `GET`
- **Auth**: Yes
- **Response (200)**:
```json
[
    {
        "id": "integer",
        "instantly_organization_id": "string",
        "instantly_organization_name": "string",
        "instantly_api_key": "string",
        "instantly_organization_status": "boolean"
    }
]
```

### Status Checks

#### Check Instantly Status
- **URL**: `/settings/check-instantly-status`
- **Method**: `GET`
- **Auth**: Yes
- **Response (200)**:
```json
{
    "status": "boolean",
    "message": "string",
    "user_id": "string",
    "organizations": []
}
```

#### Check EmailGuard Status
- **URL**: `/settings/check-emailguard-status`
- **Method**: `GET`
- **Auth**: Yes
- **Response (200)**:
```json
{
    "status": "boolean",
    "message": "string"
}
```

#### Check Bison Organization Status
- **URL**: `/settings/check-bison-organization-status/{org_id}`
- **Method**: `POST`
- **Auth**: Yes
- **Response (200)**:
```json
{
    "status": "boolean",
    "message": "string"
}
```

### Get Stored Keys/Accounts

#### Get Instantly Editor Account
- **URL**: `/settings/instantly-editor`
- **Method**: `GET`
- **Auth**: Yes
- **Response (200)**:
```json
{
    "instantly_editor_email": "string",
    "instantly_editor_password": "string"
}
```

#### Get EmailGuard Key
- **URL**: `/settings/emailguard-key`
- **Method**: `GET`
- **Auth**: Yes
- **Response (200)**:
```json
{
    "emailguard_api_key": "string"
}
```

#### Get Bison Organizations
- **URL**: `/settings/bison-organizations`
- **Method**: `GET`
- **Auth**: Yes
- **Response (200)**:
```json
[
    {
        "bison_organization_id": "string",
        "bison_organization_name": "string",
        "bison_api_key": "string"
    }
]
```

## Error Responses

All endpoints may return these error responses:

### 400 Bad Request
```json
{
    "detail": "Error message"
}
```

### 401 Unauthorized
```json
{
    "detail": "Invalid credentials"
}
```

### 404 Not Found
```json
{
    "detail": "Resource not found"
}
```

# Profile Picture Upload

## Endpoint
- **URL**: `/api/profile/picture`
- **Method**: `PUT`
- **Auth Required**: Yes (Bearer Token)

## Request Format
The request must be sent as `multipart/form-data` with a single file field:

```typescript
const formData = new FormData();
formData.append('file', file); // file must be named 'file'
```

## Example Implementation
```typescript
// Profile picture upload function
const updateProfilePicture = async (file: File) => {
  // Validate file type
  if (!file.type.startsWith('image/')) {
    throw new Error('File must be an image');
  }

  // Validate file size (max 2.5MB)
  if (file.size > 2.5 * 1024 * 1024) {
    throw new Error('File size must be less than 2.5MB');
  }

  const formData = new FormData();
  formData.append('file', file);

  try {
    const response = await axios.put(
      '/api/profile/picture',
      formData,
      {
        headers: {
          Authorization: `Bearer ${token}`,
          // Do NOT set Content-Type - axios will set it automatically
        }
      }
    );
    return response.data;
  } catch (error) {
    if (error.response?.status === 422) {
      throw new Error('Invalid file format or missing file');
    }
    throw error;
  }
};

// Usage in a React component
const ProfilePictureUpload = () => {
  const handleFileChange = async (event: React.ChangeEvent<HTMLInputElement>) => {
    const file = event.target.files?.[0];
    if (!file) return;

    try {
      await updateProfilePicture(file);
      // Handle success (e.g., show success message, update UI)
    } catch (error) {
      // Handle error (e.g., show error message)
      console.error('Upload failed:', error.message);
    }
  };

  return (
    <input
      type="file"
      accept="image/*"
      onChange={handleFileChange}
    />
  );
};
```

## Important Notes
1. File Requirements:
   - Field name must be 'file'
   - Must be an image file (JPEG, PNG, GIF)
   - Maximum size: 2.5MB
   - Content-Type must be image/* (e.g., image/jpeg, image/png)

2. Common Issues:
   - 422 Error: Usually means the file field is missing or invalid
   - 400 Error: File validation failed (not an image or too large)
   - 401 Error: Invalid or missing authentication token

3. Best Practices:
   - Always validate file type and size on frontend before uploading
   - Don't set Content-Type header manually when using FormData
   - Handle errors appropriately and show user-friendly messages
   - Consider adding loading state during upload

## Response Format
### Success (200)
```json
{
    "first_name": "string",
    "last_name": "string",
    "email": "string",
    "profile_picture": "string (URL)",
    "timezone": "string"
}
```

### Error (400, 401, 422)
```json
{
    "message": "Error description"
}
```

## Example Error Handling
```typescript
const handleUpload = async (file: File) => {
  try {
    // Show loading state
    setIsUploading(true);

    // Validate file type
    if (!file.type.startsWith('image/')) {
      throw new Error('Please select an image file');
    }

    // Validate file size (2.5MB)
    const maxSize = 2.5 * 1024 * 1024;
    if (file.size > maxSize) {
      throw new Error('File size must be less than 2.5MB');
    }

    // Upload file
    const result = await updateProfilePicture(file);
    
    // Update UI with new profile picture
    setProfilePicture(result.profile_picture);
    
    // Show success message
    toast.success('Profile picture updated successfully');
    
  } catch (error) {
    // Handle specific errors
    if (error.response?.status === 422) {
      toast.error('Please select a valid image file');
    } else if (error.response?.status === 401) {
      toast.error('Please log in again');
      // Handle session expiry
    } else {
      toast.error(error.message || 'Failed to update profile picture');
    }
  } finally {
    setIsUploading(false);
  }
};
``` 