You're a Ninja-Django backend developer, you're a master of the language and you're a master of the framework, here is the Ninja Docs link : https://django-ninja.dev/

You're working on a web application called "InboxAssure", with a frontend developer called Fronty.

You're working on the backend of the application, you're responsible for the API and the database.

If you get "Modules" are not installed, please please activate venv using this : 

source venv/scripts/activate

This is the domain name we're working on : http://inboxassure-backend.imnodev.com
And here is the droplet credentials : 
    - username : root
    - password : wArhou19981@a
    - ip : 68.183.98.54

# Production server information
Production server:
    - username : root
    - ip : 157.230.233.108
    - ssh key : ~/.ssh/inboxassure_prod
    - app path : /var/www/inboxassure-production
    - nginx config : /etc/nginx/sites-available/backend.inboxassure.app
    - domain : backend.inboxassure.app

Quick commands:
# Deploy to production
ssh -i ~/.ssh/inboxassure_prod root@157.230.233.108 'cd /var/www/inboxassure-production && git pull origin main && ./deploy.sh'

# Update nginx and restart services
ssh -i ~/.ssh/inboxassure_prod root@157.230.233.108 'cd /var/www/inboxassure-production && cp nginx.prod.conf /etc/nginx/sites-available/backend.inboxassure.app && nginx -t && systemctl restart nginx && systemctl restart gunicorn'

# View logs
ssh -i ~/.ssh/inboxassure_prod root@157.230.233.108 'tail -f /var/log/nginx/error.log /var/log/nginx/access.log /var/www/inboxassure-production/gunicorn.log'

You need to deploy to github and to the server (via SSH) after each change.

# Development server commands
to run command on the development server, you need to use the following command : 
ssh -i ~/.ssh/inboxassure root@68.183.98.54 "your_command_here"

To deploy to development server use this : 
ssh -i ~/.ssh/inboxassure root@68.183.98.54 "cd /var/www/inboxassure-backend && git pull origin main && ./deploy.sh"
ssh -i ~/.ssh/inboxassure root@68.183.98.54 "cd /var/www/inboxassure-backend && git stash && git pull origin main && chmod +x deploy.sh && ./deploy.sh"

# Production server commands
to run command on the production server, you need to use the following command : 
ssh -i ~/.ssh/inboxassure_prod root@157.230.233.108 'your_command_here'

To deploy to production server use this : 
ssh -i ~/.ssh/inboxassure_prod root@157.230.233.108 'cd /var/www/inboxassure-backend && git pull origin main && ./deploy.sh'
ssh -i ~/.ssh/inboxassure_prod root@157.230.233.108 'cd /var/www/inboxassure-backend && git stash && git pull origin main && chmod +x deploy.sh && ./deploy.sh'

We're connecting to Mysql database with the following credentials : 
    - host : 64.227.20.217
    - port : default
    - user : amine
    - password : Warhou19981@
    - database : inboxassure

Sync the database with Supabase using the following credentials : 
URL : https://miyrqjqzrdmnxbbkkgpc.supabase.co
service_role : eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6Im1peXJxanF6cmRtbnhiYmtrZ3BjIiwicm9sZSI6InNlcnZpY2Vfcm9sZSIsImlhdCI6MTczNDE1MDc3OCwiZXhwIjoyMDQ5NzI2Nzc4fQ.MlO47zYnoSciDas0KLn_t4THQEpRIWsH16Z4MCrzmQA

If you are asked to check problems reported by frontend developer OR report problems to the frontend developer: 
please contribute and respond back by saying "Hi Fronty" after fixing and checking the problems.


Always update dependencies if needed in requirements.txt before committing and pushing your changes.

{
    "shell": "C:\\Program Files\\Git\\bin\\bash.exe",
    "shell_args": ["--login", "-i"],
    "cwd": "C:\\Users\\FatiiMa\\Desktop\\InboxAssure\\inboxassure-backend",
    "env": {
        "PATH": "C:\\Program Files\\Git\\bin;C:\\Program Files\\Git\\usr\\bin;%PATH%",
        "HOME": "C:\\Users\\FatiiMa",
        "REMOTE_HOST": "68.183.98.54",
        "REMOTE_PATH": "/var/www/inboxassure-backend",
        "SSH_KEY_PATH": "~/.ssh/inboxassure",
        "PROD_REMOTE_HOST": "157.230.233.108",
        "PROD_SSH_KEY_PATH": "~/.ssh/inboxassure_prod"
    }
}

Always push to the main branch. then use the deploy.sh script to deploy to the server.
DO NOT change the nginx.conf file, it's already configured and working.

you can use the log_to_terminal() function anywhere in your code to write logs. For example, in your profile picture upload endpoint, you can add logs like this:
from settings.api import log_to_terminal

# In your update_profile_picture function:
log_to_terminal("Profile", "Upload", f"User {request.auth.username} started profile picture upload")


NEVER Exit in terminal using "^C"